{
	"debug print": {
		"scope": "javascript",
		"prefix" : "debug",
		"body": "console.log(`$1 ${$2}`);",
		"description": "Creates debug statement"
	},

	"newpq": {
		"scope": "javascript",
		"prefix": "newpq",
		"body": "const $1 = new PQ({\n\ttext: `\n\t$2\n\t`\n});",
		"description": "Creates a new ParamaterizedQuery"
	},

	"dbquery" : {
		"scope": "javascript",
		"prefix": "dbquery",
		"body": "db.$1($2)\n.then((result) => {\n\t$3\n}).catch((error) => {\n\tconsole.error('$4' + error);\n\t\n});",
		"description": "Creates a new pg-promise"
	},

	"nonequery": {
		"scope": "javascript",
		"prefix": "nonequery",
		"body": "db.none($1, [$2])\n.catch((error) => {\n\tconsole.error('$3' + error);\n});",
		"description": "Creates a new pg-promise"
	},

	"jsx comment": {
		"scope": "javascriptreact",
		"prefix" : "comment",
		"body": "{/* $1 */}",
		"description": "Creates a JSX comment"
	},

	"use effect": {
		"scope": "javascriptreact",
		"prefix": "effect",
		"body": "useEffect(() => {\n\t$1\n}, [$2],\n);\n",
		"description": "Creates a useEffectBlock"
	},

	"spelllist": {
		"scope": "sql",
		"prefix": "spelllist",
		"body": "((SELECT spellid from spell WHERE name = '$1'), (SELECT classid FROM class WHERE name = '${2|Bard,Cleric,Druid,Paladin,Ranger,Sorcerer,Warlock,Wizard|}'), NULL, $4, $5),",
		"description": "Creates a value row for spell list initial insert"
	},

	"arcanelist": {
		"scope": "sql",
		"prefix": "arcanelist",
		"body": "((SELECT spellid from spell WHERE name = '$1'), (SELECT classid FROM class WHERE name = 'Bard'), NULL, $2, $3),\n((SELECT spellid from spell WHERE name = '$1'), (SELECT classid FROM class WHERE name = 'Sorcerer'), NULL, $2, $3),\n((SELECT spellid from spell WHERE name = '$1'), (SELECT classid FROM class WHERE name = 'Warlock'), NULL, $2, $3),\n((SELECT spellid from spell WHERE name = '$1'), (SELECT classid FROM class WHERE name = 'Wizard'), NULL, $2, $3),",
		"description": "Creates a value row for spell list initial insert"
	},
	

	// Place your next_tests workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}