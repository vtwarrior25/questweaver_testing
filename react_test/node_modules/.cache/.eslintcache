[{"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\index.js":"1","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\App.js":"2","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\reportWebVitals.js":"3","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DiceRollButton.js":"4","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillSection.js":"5","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillRow.js":"6","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilitySection.js":"7","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilityBox.js":"8","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SingleRollResult.js":"9","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\RollResultsSection.js":"10","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\HealthSection.js":"11","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterSheet.js":"12","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\StaticStatsBox.js":"13","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRoller.js":"14","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterInventoryArea.js":"15","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrowSection.js":"16","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrow.js":"17","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DefensesConditionsBox.js":"18","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MapSection.js":"19","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Map.js":"20","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderBox.js":"21","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderItem.js":"22","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chatbox.js":"23","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chat.js":"24","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ChatMessage.js":"25","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLog.js":"26","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLogMessage.js":"27","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterSheet.js":"28","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroup.js":"29","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroupForm.js":"30","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterCreator.js":"31","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ActionsMenu.js":"32","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRollButton.js":"33","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsMenu.js":"34","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsLevelSection.js":"35","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventoryMenu.js":"36","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventorySection.js":"37"},{"size":536,"mtime":1699034410573,"results":"38","hashOfConfig":"39"},{"size":4214,"mtime":1706851071822,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1699032879980,"results":"41","hashOfConfig":"39"},{"size":1985,"mtime":1706737917180,"results":"42","hashOfConfig":"39"},{"size":1001,"mtime":1706681453156,"results":"43","hashOfConfig":"39"},{"size":558,"mtime":1706676869133,"results":"44","hashOfConfig":"39"},{"size":1625,"mtime":1706891426949,"results":"45","hashOfConfig":"39"},{"size":510,"mtime":1706676828894,"results":"46","hashOfConfig":"39"},{"size":636,"mtime":1706545133699,"results":"47","hashOfConfig":"39"},{"size":1315,"mtime":1706686034644,"results":"48","hashOfConfig":"39"},{"size":3258,"mtime":1706541725975,"results":"49","hashOfConfig":"39"},{"size":2165,"mtime":1706891223984,"results":"50","hashOfConfig":"39"},{"size":1943,"mtime":1706676890812,"results":"51","hashOfConfig":"39"},{"size":6603,"mtime":1706686047531,"results":"52","hashOfConfig":"39"},{"size":953,"mtime":1706809347189,"results":"53","hashOfConfig":"39"},{"size":2755,"mtime":1706336087014,"results":"54","hashOfConfig":"39"},{"size":417,"mtime":1706676859428,"results":"55","hashOfConfig":"39"},{"size":985,"mtime":1706476159728,"results":"56","hashOfConfig":"39"},{"size":536,"mtime":1706851066676,"results":"57","hashOfConfig":"39"},{"size":156,"mtime":1706506468897,"results":"58","hashOfConfig":"39"},{"size":2410,"mtime":1706853113793,"results":"59","hashOfConfig":"39"},{"size":475,"mtime":1706853327222,"results":"60","hashOfConfig":"39"},{"size":531,"mtime":1706541685434,"results":"61","hashOfConfig":"39"},{"size":1917,"mtime":1706741714592,"results":"62","hashOfConfig":"39"},{"size":256,"mtime":1706506142499,"results":"63","hashOfConfig":"39"},{"size":1157,"mtime":1706505418986,"results":"64","hashOfConfig":"39"},{"size":313,"mtime":1706504862643,"results":"65","hashOfConfig":"39"},{"size":1100,"mtime":1706892314498,"results":"66","hashOfConfig":"39"},{"size":7162,"mtime":1706888010258,"results":"67","hashOfConfig":"39"},{"size":12818,"mtime":1706745973094,"results":"68","hashOfConfig":"39"},{"size":6349,"mtime":1706819296899,"results":"69","hashOfConfig":"39"},{"size":2514,"mtime":1706745866395,"results":"70","hashOfConfig":"39"},{"size":447,"mtime":1706677991517,"results":"71","hashOfConfig":"39"},{"size":3045,"mtime":1706891650299,"results":"72","hashOfConfig":"39"},{"size":3396,"mtime":1706744795923,"results":"73","hashOfConfig":"39"},{"size":3417,"mtime":1706890687535,"results":"74","hashOfConfig":"39"},{"size":2674,"mtime":1706890883037,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"1dx4dds",{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"79"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"79"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"79"},{"filePath":"105","messages":"106","suppressedMessages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"79"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"79"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"79"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"120","messages":"121","suppressedMessages":"122","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"79"},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"79"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"79"},{"filePath":"132","messages":"133","suppressedMessages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"79"},{"filePath":"136","messages":"137","suppressedMessages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"139","messages":"140","suppressedMessages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"142","messages":"143","suppressedMessages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"79"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"79"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"79"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"166","messages":"167","suppressedMessages":"168","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"79"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"79"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"79"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"79"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"79"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\index.js",[],[],["207"],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\App.js",["208","209","210"],[],"// React Imports\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport RollResultsSection from \"./RollResultsSection\";\nimport CharacterSheet from \"./CharacterSheet\";\nimport StaticStatsBox from \"./StaticStatsBox\";\nimport MapSection from \"./MapSection\";\nimport MonsterSheet from \"./MonsterSheet\";\n\n// React-Bootstrap Imports\nimport { Button, Container, Offcanvas, Tab, Tabs, Row, Col } from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AbilityBox from \"./AbilityBox\";\nimport ManualDiceRoller from \"./ManualDiceRoller\";\nimport CharacterCreator from \"./CharacterCreator\";\n\n\nfunction App () {\n  const [rollresults, setRollResults] = useState({\n    rolls: [],\n    rollstring: \"\",\n    rolltotal: \"\",\n    basestring: \"\",\n    name: \"\",\n    rolltype: \"\",\n  });\n\n  const [showboxes, setShowBoxes] = useState({\n    showabilitysection: true,\n    showhealthsection: true,\n    showstaticstatsbox: true,\n    showmanualdiceroller: true,\n    showsavingthrowsection: true,\n    showskillsection: true,\n    showcharacterinventoryarea: true,\n    showdefensesconditions: true,\n    showturnorderbox: true,\n  })\n\n  /*\n    {\n      name: \"Ability Section\",\n      visible: true,\n    },\n    {\n      name: \"Health Section\",\n      visible: true,\n    },\n    {\n      name: \"Static Stats Box\",\n      visible: true,\n    },\n    {\n      name: \"Manual Dice Roller\",\n      visible: true,\n    },\n    {\n      name: \"Saving Throw Section\",\n      visible: true,\n    },\n    {\n      name: \"Skill Section\",\n      visible: true,\n    },\n    {\n      name: \"Character Inventory Area\",\n      visible: true,\n    },\n    */\n\n\n\n  useEffect(() => {\n    console.log(showboxes);\n    console.log(\"Refreshing showboxes\");\n  }, [showboxes]);\n\n  const [showToggleMenu, setShowToggleMenu] = useState(false);\n\n  const toggleMenuClose = () => setShowToggleMenu(false);\n  const toggleMenuOpen = () => setShowToggleMenu(true);\n\n\n  const changeShowBoxes = (showbox) => {\n    let newshowboxes = {...showboxes};\n    console.log('epic shit brothers');\n    console.log(showbox);\n    newshowboxes[showbox] = !newshowboxes[showbox];\n    setShowBoxes(newshowboxes);\n    console.log(showboxes);\n  }\n\n  /*\n  <SkillSection setRollResults={setRollResults} rollresults={rollresults}/>\n  <AbilitySection setRollResults={setRollResults} rollresults={rollresults}/>\n  */\n  return (\n    <div className=\"App\">\n      <Container fluid className=\"mainContainer\">\n        <Row>\n          <Col>\n            <Tabs className=\"frontElement\" defaultActiveKey='jerome' id=\"testingTabs\">\n              <Tab eventKey='monster' title='Monster'>\n                <MonsterSheet></MonsterSheet>\n              </Tab>\n              <Tab eventKey='jerome' title='Jerome'>\n                <div className='sheetAndMap'>\n                  <CharacterSheet showboxes={showboxes} setShowBoxes={setShowBoxes} setRollResults={setRollResults} rollresults={rollresults}></CharacterSheet>\n                </div>\n              </Tab>\n              <Tab eventKey=\"characterCreator\" title=\"Character Creator\">\n                <CharacterCreator></CharacterCreator>\n              </Tab>\n            </Tabs>\n          </Col>\n          <Col>\n            <MapSection showboxes={showboxes} setShowBoxes={setShowBoxes}></MapSection>\n            <RollResultsSection rollresults={rollresults}/>\n          </Col>\n        </Row>\n        <Button onClick={toggleMenuOpen}>&</Button>\n      </Container>\n      <Offcanvas show={showToggleMenu} onHide={toggleMenuClose}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <div className=\"offcanvasVisibilityToggles\">\n          {Object.keys(showboxes).map((showbox, index) =>\n            <div key={index}>\n              <label htmlFor={showbox}>{showbox}</label>\n              <input type='checkbox' name={showbox} checked={showboxes[showbox]} onChange={() => changeShowBoxes(showbox)}></input>\n            </div>\n          )}\n          </div>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </div>\n  );\n}\n\n/*\nDice Roll API Testing URL\nhttp://localhost:9000/rollcheck?name=Strength&rolltype=Ability&die=20&num=1&mod=2\n*/\n\nexport default App;\n","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\reportWebVitals.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DiceRollButton.js",["211"],[],"import React, {useState} from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n//import io from 'socket.io-client';\r\n//const socket = io.connect('http://localhost:4000');\r\n\r\n\r\nfunction DiceRollButton ({name, rolltype, die, num, mod, setRollResults, text}) {\r\n  const [rolldata, setRollData] = useState({\r\n      rolls: [],\r\n      rollstring: \"\",\r\n      rolltotal: \"\",\r\n      basestring: \"\",\r\n      name: \"\",\r\n      rolltype: \"\",\r\n    });\r\n\r\n  /*\r\n  const rollDice = () => {\r\n    socket.emit('rolldice', this.state.data);\r\n  }\r\n  */ \r\n  const modPos = (modval, space) => {\r\n    let modifier = modval;\r\n    if (space === true) {\r\n      modifier = ` ${modifier}`;\r\n    }\r\n    if (modifier > 0) {\r\n      return `+${modifier}`;\r\n    } else if (modifier < 0) {\r\n      return `-${modifier}`;\r\n    } else {\r\n      return `${modifier}`;\r\n    }\r\n  }\r\n\r\n\r\n  const handleText = () => {\r\n    //if (text === \"\"){\r\n      if (die === 0 && num === 0) {\r\n        return modPos(mod);\r\n        /*\r\n        if (mod > 0) {\r\n          return `+${mod}`;\r\n        } else if (mod < 0) {\r\n          return `-${mod}`;\r\n        } else {\r\n          return `${mod}`;\r\n        }\r\n        */\r\n      } else if (die !== 0 && num !== 0 && mod === 0) {\r\n        return `${num}d${die}`;\r\n      } else if (die !== 0 && num !== 0 && mod !== 0) {\r\n        return `${num}d${die} ${modPos(mod, true)}`;\r\n      } else {\r\n        return \"\";\r\n      }\r\n    //}\r\n  }\r\n\r\n  const callCheckAPI = () => {\r\n    fetch(`http://localhost:9000/rollcheck?checkmode=single&name=${name}&rolltype=${rolltype}&die=${die}&num=${num}&mod=${mod}`)\r\n        .then(res => res.json())\r\n        .then(res => setRollData(res))\r\n        .then(setRollResults(rolldata))\r\n        .then(console.log(rolldata));\r\n  }\r\n  \r\n    //console.log(`rollstring = ${this.state.checkResponse.rollstring}`)\r\n  return (\r\n    <>\r\n      <Button variant='secondary' size='sm' onClick={callCheckAPI}>{text}</Button>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default DiceRollButton;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillSection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillRow.js",["212"],[],"import React, { Component } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\nfunction SkillRow ({name, mod, prof, bonus, setRollResults}) {\r\n\r\n  return (\r\n  <tr>\r\n    <td><input type=\"checkbox\" readOnly={true} checked={prof}></input></td>\r\n    <td className=\"skillMod\">{mod}</td>\r\n    <td className=\"skillName\">{name}</td>\r\n    <td className=\"skillBonus\">\r\n      <DiceRollButton name={name} rolltype=\"Skill\" die=\"20\" num=\"1\" mod={bonus} text={bonus} setRollResults={setRollResults}/>\r\n    </td>\r\n  </tr>\r\n  );\r\n\r\n}\r\n\r\nexport default SkillRow;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilitySection.js",["213"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilityBox.js",["214"],[],"import React, { Component } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\nfunction AbilityBox ({name, abbrev, bonus, score, setRollResults}) {\r\n  return (\r\n    <div className=\"abilityBox\">\r\n      <div className=\"abilityLabel\">{abbrev}</div>\r\n      <DiceRollButton name={name} rolltype=\"Ability\" die=\"20\" num=\"1\" mod={bonus} text={bonus} setRollResults={setRollResults}/>\r\n      <div className=\"oval\">\r\n        <h4>{score}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AbilityBox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SingleRollResult.js",["215"],[],"import React, { useEffect } from \"react\";\r\n\r\nfunction SingleRollResult ({rollresults}) {\r\n\r\n  return (\r\n    <div className=\"rollResults frontElement\" id=\"rollResult1\">\r\n      <div className=\"rollDescription\" id=\"rollDescription1\">{rollresults.rollresults.name} - {rollresults.rollresults.rolltype}</div>\r\n      <div className=\"rollParts\" id=\"rollParts1\">{rollresults.rollresults.rollstring}</div>\r\n      <div className=\"rollBase\" id=\"rollBase1\">{rollresults.rollresults.basestring}</div>\r\n      <div className=\"rollTotal\" id=\"rollTotal1\">{rollresults.rollresults.rolltotal}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleRollResult;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\RollResultsSection.js",["216","217"],[],"import { useEffect, useState } from 'react';\r\nimport SingleRollResult from './SingleRollResult';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nexport default function RollResultsSection (rollresults) {\r\n  /*\r\n  const [rolllist, setRollList] = useState([\r\n    {\r\n      rolls: [ 8 ],\r\n      rollstring: '8+2',\r\n      rolltotal: 10,\r\n      basestring: '1d20+2',\r\n      name: 'Constitution',\r\n      rolltype: 'Ability'\r\n    },\r\n    {\r\n      rolls: [ 8 ],\r\n      rollstring: '8+2',\r\n      rolltotal: 10,\r\n      basestring: '1d20+2',\r\n      name: 'Constitution',\r\n      rolltype: 'Ability'\r\n    }\r\n  ]);\r\n  \r\n  const [beans, setBeans] = useState('Beans brother');\r\n  const socket = io.connect('http://localhost:4000');\r\n  */\r\n\r\n  /*useEffect(() => {\r\n    socket.on('rolldiceresult', (data) => {\r\n      \r\n      setRollList(...rolllist, data);\r\n      console.log(`Rolllist:  ${rolllist}`);\r\n      \r\n      setBeans('b');\r\n  })});\r\n  */\r\n//{rolllist.map((roll) => <SingleRollResult name={roll.name} rolltype={roll.rolltype} rollstring={roll.rollstring} basestring={roll.basestring} rolltotal={roll.rolltotal}/>)}\r\n\r\nuseEffect(() => {\r\n  console.log(\"Testing user\");\r\n}, [rollresults]\r\n)\r\n\r\n  return (\r\n      <div id=\"rollContainer\">\r\n        <SingleRollResult rollresults={rollresults}></SingleRollResult>\r\n      </div> \r\n  )\r\n}\r\n","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\HealthSection.js",["218"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\n\r\nfunction HealthSection () {\r\n  const [healthval, setHealthVal] = useState({\r\n    currenthealth: 11,\r\n    maxhealth: 22\r\n  })\r\n\r\n  const [healthmod, setHealthMod] = useState(0);\r\n\r\n  useEffect(() => {  \r\n      getHealth();\r\n    }, []\r\n  ); \r\n\r\n  useEffect(() => {\r\n      setHealth();\r\n    }, [healthval.currenthealth]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log(`healthmod ${healthmod}`); \r\n    }, [healthmod]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    console.log(`healthmod ${healthmod}`);\r\n    setHealthMod(e.target.value);\r\n    console.log(`healthmod ${healthmod}`);\r\n  }\r\n\r\n  const updateHealth = (option) => {\r\n    /*let newhealthobj = {\r\n      currenthealth: healthval.currenthealth,\r\n      maxhealth: healthval.maxhealth\r\n    }*/\r\n    let currenthealth = Number(healthval.currenthealth);\r\n    let newhealth = 0;\r\n    if (option === 'heal') {\r\n      newhealth = Number(currenthealth) + Number(healthmod);\r\n      console.log(`${newhealth} = ${currenthealth} + ${healthmod}`)\r\n    } else if (option === 'damage') {\r\n      console.log(`${newhealth} = ${currenthealth} - ${healthmod}`)\r\n      newhealth = Number(currenthealth) - Number(healthmod);\r\n    } else {\r\n      throw \"Shit's fucked brothers!\";\r\n    }\r\n    //newhealthobj.currenthealth = newhealth;\r\n    setHealthVal({...healthval, currenthealth: newhealth});\r\n    console.log(\"Current Health: \" + currenthealth + \"  HealthMod: \" + healthmod + \" NewHealth: \" + newhealth);\r\n    //addLogEntry(`Health: ${currenthealth} -> ${newhealth}`);\r\n    //document.getElementById(\"currentHealth\").value = newhealth;\r\n  }\r\n\r\n  const getHealth = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=health`)\r\n    .then(res => res.json())\r\n    .then(res => setHealthVal(res));\r\n  }\r\n\r\n  const setHealth = () => {\r\n    console.log('sethealth');\r\n    //fetch(`http://localhost:9000/sendcharacterinfo?infotype=health&currenthealth=${healthval.currenthealth}`);\r\n  }\r\n\r\n  return ( \r\n    <div className=\"healthSection frontElement\">\r\n      <Stack className=\"leftHealthSection\" direction=\"vertical\" gap={2}>\r\n        <Button variant='secondary' size='sm' onClick={() => updateHealth('heal')} >Heal</Button>\r\n        <input type='number' size=\"4\" onChange={(e) => handleChange(e)}></input>\r\n        <Button variant='secondary' size='sm' onClick={() => updateHealth('damage')} >Damage</Button>\r\n      </Stack>\r\n      <div className=\"rightHealthSection\">\r\n        <span className='characterSheetSectionTitle'>Hit Points</span>\r\n        <Stack direction=\"horizontal\" gap={1}>\r\n          <div className=\"healthBox\">\r\n            <label htmlFor=\"currenthealth\">Current</label>\r\n            <input name=\"currenthealth\" type=\"number\" size=\"4\" value={healthval.currenthealth} onChange={(e) => setHealthVal({...healthval, currenthealth: e.target.value})}></input>\r\n          </div>\r\n          <div className=\"healthBox\">\r\n            <label htmlFor=\"maxhealth\">Max</label>\r\n            <input name=\"maxhealth\" type=\"number\" size=\"4\" readOnly={true} value={healthval.maxhealth}></input>\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n      \r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default HealthSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterSheet.js",["219"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\StaticStatsBox.js",["220"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton';\r\n\r\nfunction StaticStatsBox (setRollResults, rollresults) { \r\n  const [staticstats, setStaticStats] = useState({\r\n      profbonus: 2,\r\n      speed: 30,\r\n      initiative: 2,\r\n      armorclass: 14,\r\n      perception: 5,\r\n      investigation: 5,\r\n      insight: 5,\r\n      armor: \"Light, Medium, Shields\",\r\n      weapons: \"Martial, Simple\",\r\n      tools: \"Cobbler's, Land Vehicles\",\r\n      languages: \"Common, Halfling\",\r\n    });\r\n\r\n  useEffect(() => {  \r\n      getStats();\r\n    }, []\r\n  )\r\n\r\n\r\n  const getStats = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=staticstats`)\r\n    .then(res => res.json())\r\n    .then(res => setStaticStats(res));\r\n  }\r\n\r\n  return ( \r\n    <div className=\"staticStatsBox frontElement\">\r\n      <Stack className=\"statsContainer senses\" gap={1}>\r\n        <div>Perception - {staticstats.perception}</div>\r\n        <div>Investigation - {staticstats.investigation}</div>\r\n        <div>Insight - {staticstats.insight}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer generalStats\" gap={1}>\r\n        <div>Proficiency Bonus - {staticstats.profbonus}</div>\r\n        <div>Speed - {staticstats.speed}</div>\r\n        <div>Initiative - <DiceRollButton name=\"Initiative\" rolltype=\"Stat\" die=\"20\" num=\"1\" mod={staticstats.initiative} text={staticstats.initiative} setRollResults={setRollResults}>{staticstats.initiative}</DiceRollButton></div>\r\n        <div>Armor Class - {staticstats.armorclass}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer proficiencies\">\r\n        <div>Armor - {staticstats.armor}</div>\r\n        <div>Weapons - {staticstats.weapons}</div>\r\n        <div>Tools - {staticstats.tools}</div>\r\n        <div>Languages - {staticstats.languages}</div>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StaticStatsBox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRoller.js",["221","222"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport ManualDiceRollButton from './ManualDiceRollButton';\r\n\r\nfunction ManualDiceRoller ({setRollResults}) {\r\n  const [oldbuttonvals, setOldButtonVals] = useState({\r\n    d20: 0,\r\n    d12: 0,\r\n    d10: 0,\r\n    d8: 0,\r\n    d6: 0,\r\n    d4: 0,\r\n  })\r\n\r\n  const [buttonvals, setButtonVals] = useState([\r\n    {\r\n      die: 20,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 12,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 10,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 8,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 6,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 4,\r\n      val: 0,\r\n    },\r\n  ])\r\n\r\n\r\n/*\r\n  useEffect(() => {  \r\n      getHealth();\r\n    }, []\r\n  )  \r\n  \r\n  useEffect(() => {\r\n      setHealth();\r\n    }, [healthval.currenthealth]\r\n  )\r\n  */\r\n  useEffect(() => {\r\n    console.log(\"buttonvals\");\r\n    console.log(buttonvals); \r\n    }, [buttonvals]\r\n  )\r\n  \r\n  /*\r\n  const handleChange = (e) => {\r\n    setButtonVals({...buttonvals, e.target.type: e.target.value});\r\n  }\r\n  */\r\n\r\n  const resetButtons = () => {\r\n    /*\r\n    setButtonVals({\r\n      d20: 0,\r\n      d12: 0,\r\n      d10: 0,\r\n      d8: 0,\r\n      d6: 0,\r\n      d4: 0,\r\n    })*/\r\n    setButtonVals([\r\n      {\r\n        die: 20,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 12,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 10,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 8,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 6,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 4,\r\n        val: 0,\r\n      },\r\n    ]);\r\n  }\r\n\r\n  // This whole function is disgusting\r\n  const updateButtons = (die, val, sign) => {\r\n    /*\r\n    let buttonvalue = buttonvals[`${die}`] ?? 0; \r\n    if (sign === 'plus') {\r\n      buttonvalue++;\r\n    } else if (sign === 'minus' && buttonvalue > 0) {\r\n      buttonvalue--;\r\n    }\r\n    */\r\n    let newval = val;\r\n    // This handles adding or subtracting incrementally\r\n    if (sign === 'plus') {\r\n      newval++;\r\n    } else if (sign === 'minus' && newval > 0) {\r\n      newval--;\r\n    }\r\n    // This creates a new array of all of the buttons that aren't the button we pushed\r\n    let temparray = buttonvals.filter((buttonval) => buttonval.die !== die);\r\n    console.log(temparray);\r\n    // This adds back in the new value of the button that we pushed\r\n    temparray = [...temparray, {die: die, val: newval}];\r\n    // We need to sort the array because the previous line breaks the order, and we need the correct order so that things render right\r\n    temparray.sort((a, b) => b.die - a.die);\r\n    setButtonVals(temparray);\r\n    /*\r\n    switch (die) {\r\n      case 'd20':\r\n        setButtonVals({...buttonvals, d20:buttonvalue});\r\n        break;\r\n      case 'd12':\r\n        setButtonVals({...buttonvals, d12:buttonvalue});\r\n        break;\r\n      case 'd10':\r\n        setButtonVals({...buttonvals, d10:buttonvalue});\r\n        break;\r\n      case 'd8':\r\n        setButtonVals({...buttonvals, d8:buttonvalue});\r\n        break;\r\n      case 'd6':\r\n        setButtonVals({...buttonvals, d6:buttonvalue});\r\n        break;\r\n      case 'd4':\r\n        setButtonVals({...buttonvals, d4:buttonvalue});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    */\r\n    //addLogEntry(`Health: ${currenthealth} -> ${newhealth}`);\r\n    //document.getElementById(\"currentHealth\").value = newhealth;\r\n  }\r\n\r\n  const manualRoll = () => {\r\n    let name = 'Manual';\r\n    let rolltype = \"Manual\";\r\n    console.log(\"buttonvals\");\r\n    let buttonvalssend = JSON.stringify(buttonvals);\r\n    //fetch(`http://localhost:9000/rollcheck?checkmode=multi&name=${name}&rolltype=${rolltype}&mod=0&d20num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 20)].val}&d12num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 12)].val}&d10num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 10)].val}&d8num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 8)].val}&d6num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 6)].val}&d4num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 4)].val}`)\r\n      fetch(`http://localhost:9000/rollcheck?checkmode=multi&name=${name}&rolltype=${rolltype}&mod=0&rollstodo=${buttonvalssend}`)\r\n        .then(res => res.json())\r\n        .then(res => setRollResults(res));\r\n  }\r\n\r\n  return ( \r\n    <div className=\"manualDiceRollSection frontElement\">\r\n      <Stack className=\"charManualDiceRollButtons\" direction=\"vertical\" gap={1}>\r\n        {buttonvals.map((buttonval) => <ManualDiceRollButton key={buttonval.die} die={buttonval.die} value={buttonval.val} updateFunction={updateButtons}></ManualDiceRollButton>)}\r\n      </Stack>\r\n      <Stack className=\"rightHealthSection\" direction=\"vertical\" gap={1}>\r\n        <Button variant='secondary' size='sm' onClick={() => manualRoll()}>Roll</Button>\r\n        <Button variant='secondary' size='sm' onClick={() => resetButtons()}>Reset</Button>\r\n      </Stack>\r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default ManualDiceRoller;\r\n\r\n/*\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d20', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d20', 'minus')}}>\r\n  <span>d20</span>\r\n  <span>{buttonvals.d20}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d12', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d12', 'minus')}}>\r\n  <span>d12</span>\r\n  <span>{buttonvals.d12}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d10', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d10', 'minus')}}>\r\n  <span>d10</span>\r\n  <span>{buttonvals.d10}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d8', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d8', 'minus')}}>\r\n  <span>d8</span>\r\n  <span>{buttonvals.d8}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d6', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d6', 'minus')}}>\r\n  <span>d6</span>\r\n  <span>{buttonvals.d6}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d4', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d4', 'minus')}}>\r\n  <span>d4</span>\r\n  <span>{buttonvals.d4}</span>\r\n</Button>\r\n\r\n*/","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterInventoryArea.js",["223","224"],[],"import { Stack, Button, Tab, Tabs } from 'react-bootstrap';\r\nimport ActionsMenu from './ActionsMenu';\r\nimport SpellsMenu from './SpellsMenu';\r\nimport InventoryMenu from './InventoryMenu';\r\n\r\nfunction CharacterInventoryArea({setRollResults}) {\r\n  return ( \r\n    <div className=\"characterInventoryArea frontElement\">\r\n      <Tabs defaultActiveKey='actions'>\r\n        <Tab eventKey='actions' title=\"Actions\">  \r\n          <ActionsMenu setRollResults={setRollResults}></ActionsMenu>\r\n        </Tab>\r\n        <Tab eventKey='spells' title=\"Spells\">\r\n          <SpellsMenu></SpellsMenu>\r\n        </Tab>\r\n        <Tab eventKey='inventory' title=\"Inventory\">\r\n          <InventoryMenu></InventoryMenu>\r\n        </Tab>\r\n        <Tab eventKey='features' title=\"Features\">\r\n          Features\r\n        </Tab>\r\n        <Tab eventKey='notes' title=\"Notes\">\r\n          Notes\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterInventoryArea;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrowSection.js",["225","226","227"],[],"/*\r\n  return ( \r\n    <div className=\"characterSavingThrowSection frontElement\">\r\n      <Stack className=\"characterSavingThrowLeft\" direction=\"vertical\" gap={1}>\r\n        <div className=\"characterSavingThrow\"></div>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton'\r\nimport SavingThrow from './SavingThrow';\r\n\r\nfunction SavingThrowSection ({setRollResults}) { \r\n  const [savingthrows, setSavingThrows] = useState([\r\n    {\r\n      name: 'STR',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'DEX',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'CON',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'INT',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'WIS',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'CHA',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    ]);\r\n\r\n  useEffect(() => {  \r\n      getStats();\r\n    }, []\r\n  )\r\n\r\n\r\n  const getStats = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=savingthrow`)\r\n    .then(res => res.json())\r\n    .then(res => setSavingThrows(res));\r\n  }\r\n\r\n  return (\r\n    /* \r\n    <div className=\"staticStatsBox frontElement\">\r\n      <Stack className=\"statsContainer senses\" gap={1}>\r\n        <div>Perception - {staticstats.perception}</div>\r\n        <div>Investigation - {staticstats.investigation}</div>\r\n        <div>Insight - {staticstats.insight}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer generalStats\" gap={1}>\r\n        <div>Proficiency Bonus - {staticstats.profbonus}</div>\r\n        <div>Speed - {staticstats.speed}</div>\r\n        <div>Initiative - <DiceRollButton name=\"Initiative\" rolltype=\"Stat\" die=\"20\" num=\"1\" mod={staticstats.initiative} setRollResults={setRollResults}>{staticstats.initiative}</DiceRollButton></div>\r\n        <div>Armor Class - {staticstats.armorclass}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer proficiencies\">\r\n        <div>Armor - {staticstats.armor}</div>\r\n        <div>Weapons - {staticstats.weapons}</div>\r\n        <div>Tools - {staticstats.tools}</div>\r\n        <div>Languages - {staticstats.languages}</div>\r\n      </Stack>\r\n    </div>\r\n    */\r\n    <div className=\"characterSavingThrowSectionBox frontElement\">\r\n      <span className='characterSheetSectionTitle'>Saving Throws</span>\r\n      <div className=\"characterSavingThrowSection\">\r\n        {savingthrows.map((savingthrow) => <SavingThrow key={savingthrow.name} name={savingthrow.name} prof={savingthrow.prof} val={savingthrow.val} setRollResults={setRollResults}/>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SavingThrowSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrow.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DefensesConditionsBox.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MapSection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Map.js",["228"],[],"function Map() {\r\n\r\n  const MapCanvas = props => <canvas {...props}/>\r\n\r\n  return ( \r\n    <div>\r\n      MapCanvas\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderBox.js",["229"],[],"import { useState, useEffect, useCallback} from \"react\";\r\nimport TurnOrderItem from \"./TurnOrderItem\";\r\nimport { Button } from 'react-bootstrap';\r\n\r\nfunction TurnOrder() {\r\n  const [turnorder, setTurnOrder] = useState([\r\n    /*\r\n    {\r\n      id: 0,\r\n      name: \"Jerome\",\r\n      initiative: 17,\r\n    },\r\n    {\r\n      id: 1,\r\n      name: \"Dylan\",\r\n      initiative: 15,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Greg\",\r\n      initiative: 15,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Rebecca\",\r\n      initiative: 14,\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Jauffre\",\r\n      initiative: 12,\r\n    },\r\n    {\r\n      id: 5,\r\n      name: \"Erica\",\r\n      initiative: 11,\r\n    },\r\n    */\r\n  ]);\r\n\r\n  const [currentturn, setCurrentTurn] = useState(0);\r\n\r\n  const changeTurn = (mode) => {\r\n    let turnorderlength = turnorder.length;\r\n    let newturn = currentturn;\r\n    if (mode === \"next\") {\r\n      newturn = (newturn + 1) % turnorderlength;\r\n    } else if (mode === \"prev\") {\r\n      newturn = (newturn - 1 + turnorderlength) % turnorderlength;\r\n    }\r\n    setCurrentTurn(newturn);\r\n    console.log(newturn);\r\n  }\r\n\r\n  useEffect(() => {  \r\n    getTurnOrder();\r\n    }, []\r\n  )\r\n\r\n\r\n  const getTurnOrder = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=turnorder`)\r\n    .then(res => res.json())\r\n    .then(res => setTurnOrder([...res].sort((a,b) => {console.log(`sortmode a=${a.initiative} b=${b.initiative}`);return b.initiative - a.initiative})));\r\n  }\r\n\r\n  const removeTurnOrderItem = (nametoremove, initiative) => {\r\n    setTurnOrder(turnorder.filter((turn) => turn.name !== nametoremove || turn.initiative !== initiative))\r\n  }\r\n  \r\n\r\n  return ( \r\n    <div className=\"turnOrderBox frontElement\">\r\n      <div className=\"turnOrderList\">\r\n        {turnorder && turnorder.map((turn, index) => <TurnOrderItem key={index} name={turn.name} initiative={turn.initiative} currentturn={index === currentturn?true:false} removeItem={removeTurnOrderItem}/>)}\r\n      </div>\r\n      <div className=\"turnOrderButtons\">\r\n        <div className=\"turnOrderControlButtons\">\r\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => changeTurn(\"prev\")}>Prev</Button>\r\n          <Button variant=\"secondary\" size=\"sm\" onClick={() => changeTurn(\"next\")}>Next</Button>\r\n        </div>\r\n        <Button variant=\"secondary\" size=\"sm\">Clear</Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TurnOrder;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderItem.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chatbox.js",["230","231"],[],"import { useEffect, useState } from 'react';\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport Chat from './Chat';\r\nimport GameLog from './GameLog';\r\n\r\nfunction Chatbox() {\r\n\r\n  return ( \r\n    <div className=\"chatBox frontElement\">\r\n      <Tabs defaultActiveKey=\"chat\" className=\"chatTabs\">\r\n        <Tab eventKey=\"chat\" title=\"Chat\">\r\n          <Chat></Chat>\r\n        </Tab>\r\n        <Tab eventKey=\"log\" title=\"Log\">\r\n          <GameLog></GameLog>\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chat.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ChatMessage.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLog.js",["232","233"],[],"import { useState, useEffect } from 'react';\r\nimport GameLogMessage from './GameLogMessage';\r\n\r\nfunction GameLog() {\r\n\r\n  const [logmessages, setLogMessages] = useState([\r\n    {\r\n      id: 0,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n    {\r\n      id: 1,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n    {\r\n      id: 2,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n    {\r\n      id: 3,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n  ]);\r\n\r\n  /*\r\n  useEffect(() => {  \r\n    getLog();\r\n    }, []\r\n  );\r\n\r\n\r\n  const getLog = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=log`)\r\n    .then(res => res.json())\r\n    .then(res => setLogMessages(res));\r\n  }\r\n  */\r\n  return ( \r\n    <div className=\"gameLogInnerBox\">\r\n      {logmessages.map((message) => <GameLogMessage key={message.id} character={message.character} type={message.type} text={message.text}/>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameLog;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLogMessage.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterSheet.js",["234","235"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroup.js",["236","237"],[],"import { Button, Table } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton';\r\n\r\nfunction MonsterGroup({monsterinfo}) {\r\n\r\n  const removeMonsterGroup = () => {\r\n    console.log(\"This will remove the monster group\");\r\n  }\r\n\r\n  return ( \r\n    <div className=\"monsterGroupDisplay frontElement\">\r\n      <div className=\"monsterGroupDisplayBasicInfo\">\r\n        <Table size=\"sm\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Creature</th>\r\n              <td><span name=\"creature\">{monsterinfo.name}</span></td>\r\n              <td><span name=\"quantity\">2</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Description</th>\r\n              <td colSpan=\"2\"><span name=\"description\">Cragmaw</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>HD/CR</th>\r\n              <td><span name=\"hitdicenum\">2</span>d<span name=\"hitdicetype\">6</span></td>\r\n              <td><span name=\"challengerating\">0.25</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Size/Type</th>\r\n              <td><span name=\"size\">Small</span></td>\r\n              <td><span name=\"type\">Monster</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Alignment</th>\r\n              <td colSpan=\"2\"><span name=\"alignment\">Neutral Evil</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>XP Per/Total</th>\r\n              <td><span name=\"xpper\">50</span></td>\r\n              <td><span name=\"xptotal\">100</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>AC/Speed</th>\r\n              <td><span name=\"ac\">13</span></td>\r\n              <td><span name=\"speed\">50</span></td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"3\"><button className=\"monsterRemoveFromEncounterButton\" onClick={removeMonsterGroup()}>Remove From Encounter</button></td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className='monsterGroupDisplayAbilities'>\r\n        <Table size=\"sm\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Init</th>\r\n              <td colSpan=\"2\">\r\n                <button className=\"monsterSheetInitButton\" name=\"Initiative\">+2</button>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Str</th>\r\n              <td><span name=\"abilitystr\">8</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Strength\">-1</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Dex</th>\r\n              <td><span name=\"abilitydex\">14</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Dexterity\">+2</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Con</th>\r\n              <td><span name=\"abilitycon\">10</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Constitution\">0</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Int</th>\r\n              <td><span name=\"abilityint\">10</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Intelligence\">0</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Wis</th>\r\n              <td><span name=\"abilitywis\">8</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Wisdom\">-1</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Cha</th>\r\n              <td><span name=\"abilitycha\">8</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Charisma\">-1</button></td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"monsterGroupDisplayAttacks\">\r\n        <Table size='sm'>\r\n          <thead>\r\n            <tr>\r\n              <th>Attack</th>\r\n              <th>Hit+</th>\r\n              <th>Damage</th>\r\n              <th>Type</th>\r\n              <th>HP</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td><span name=\"attack1name\">Scimitar</span></td>\r\n              <td><span name=\"attack1hit\">4</span></td>\r\n              <td><span name=\"attack1numdice\">1</span>d<span name=\"attack1dice\">6</span><span name=\"attack1bonus\">+4</span></td>\r\n              <td><span name=\"damagetype1\">Slashing</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput1\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"0\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td><span name=\"attack2name\">Shortbow</span></td>\r\n              <td><span name=\"attack2hit\">4</span></td>\r\n              <td><span name=\"attack2numdice\">1</span>d<span name=\"attack2dice\">6</span><span name=\"attack2bonus\">+4</span></td>\r\n              <td><span name=\"damagetype2\">Piercing</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput2\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td><span name=\"attack3name\"></span></td>\r\n              <td><span name=\"attack3hit\"></span></td>\r\n              <td><span name=\"attack3numdice\"></span>d<span name=\"attack3dice\"></span><span name=\"attack3bonus\"></span></td>\r\n              <td><span name=\"damagetype3\"></span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput3\" className=\"monsterHealthInput\" type=\"number\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td><span name=\"attack4name\"></span></td>\r\n              <td><span name=\"attack4hit\"></span></td>\r\n              <td><span name=\"attack4numdice\"></span>d<span name=\"attack4dice\"></span><span name=\"attack4bonus\"></span></td>\r\n              <td><span name=\"damagetype4\"></span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput4\" className=\"monsterHealthInput\" type=\"number\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"4\" rowSpan=\"2\"><span name=\"skills\">Stealth +6; Darkvision 60'</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput5\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput6\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"4\" rowSpan=\"2\"><span name=\"ability\">Nimble Escape (Disengage or Hide as Bonus Action)</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput7\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput8\" className=\"monsterHealthInput\" type=\"text\" defaultValue=\"\"/></td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"monsterGroupNotesSection\">\r\n        <div className=\"monsterGroupNotes\"></div>\r\n          <label htmlFor=\"monsterGroupNotesText\">Notes</label>\r\n          <textarea name=\"monsterGroupNotesText\"></textarea>\r\n      </div>\r\n    </div>\r\n   );\r\n}\r\n\r\nexport default MonsterGroup;\r\n\r\n","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroupForm.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterCreator.js",["238","239","240","241"],[],"import { useState, useEffect } from 'react';\r\nimport { Nav, Tab, Tabs, Table, Button } from 'react-bootstrap';\r\nimport AbilityBox from './AbilityBox';\r\nimport AbilitySection from './AbilitySection';\r\n\r\nfunction CharacterCreator() {\r\n  \r\n  const [tempvalues, settempvalues] = useState([0,0,0,0,0,0]); \r\n\r\n  const [selectabilities, setSelectAbilities] = useState([\"-\", \"STR\", \"DEX\", \"CON\", \"INT\", \"WIS\", \"CHA\"]);\r\n\r\n  const [abilities, setAbilityScores] = useState([\r\n    {\r\n      abilityname: \"Strength\",\r\n      abilityabbrev: \"STR\",\r\n      abilityscore: 0,\r\n      abilitybonus: 0,\r\n    },\r\n    {\r\n      abilityname: \"Dexterity\",\r\n      abilityabbrev: \"DEX\",\r\n      abilityscore: 0,\r\n      abilitybonus: 0,\r\n    },\r\n    {\r\n      abilityname: \"Constitution\",\r\n      abilityabbrev: \"CON\",\r\n      abilityscore: 0,\r\n      abilitybonus: 0,\r\n    },\r\n    {\r\n      abilityname: \"Intelligence\",\r\n      abilityabbrev: \"INT\",\r\n      abilityscore: 0,\r\n      abilitybonus: 0,\r\n    },\r\n    {\r\n      abilityname: \"Wisdom\",\r\n      abilityabbrev: \"WIS\",\r\n      abilityscore: 0,\r\n      abilitybonus: 0,\r\n    },\r\n    {\r\n      abilityname: \"Charisma\",\r\n      abilityabbrev: \"CHA\",\r\n      abilityscore: 0,\r\n      abilitybonus: 0,\r\n    },\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    setAbilities();\r\n    }, [abilities]\r\n  );\r\n\r\n\r\n  const setAbilities = () => {\r\n    console.log(\"Setting ability scores on server\");\r\n  }\r\n\r\n  // This function should hide the option currently selected by each dropdown from the list of options of the other dropdowns, and should show the options again when they aren't selected anywhere\r\n  const updateSelections = (e) => {\r\n    let a = e.target.value;\r\n    setSelectAbilities(selectabilities.filter(item => item !== a || item === '-'));\r\n    \r\n    console.log(a);\r\n  }\r\n\r\n\r\n  const setAbilityValues = () => {\r\n    \r\n  }\r\n\r\n  return (  \r\n    <div className=\"characterCreator\">\r\n      <Tabs className='characterCreatorTabs frontElement' defaultActiveKey=\"race\">\r\n        <Tab eventKey=\"race\" title=\"Race\">\r\n          <div className='characterCreatorSection characterCreatorRace frontElement'>\r\n            <Tab.Container defaultActiveKey=\"dragonborn\">\r\n              <Nav variant=\"pills\" className=\"flex-column\">\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"dragonborn\">Dragonborn</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"dwarf\">Dwarf</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"hilldwarf\">Hill Dwarf</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"mountaindwarf\">Mountain Dwarf</Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"highelf\">High Elf</Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n              <Tab.Content>\r\n                <Tab.Pane className=\"characterCreatorTabContent\" eventKey=\"dragonborn\">\r\n                  <div className=\"characterCreatorTabContent\">\r\n                    <Table size='sm'>\r\n                      <thead>\r\n                        <tr>\r\n                          <th>Dragon</th>\r\n                          <th>Damage Type</th>\r\n                          <th>Breath Weapon</th>\r\n                        </tr>\r\n                      </thead>\r\n                      <tbody>\r\n                        <tr>\r\n                          <td>Black</td>\r\n                          <td>Acid</td>\r\n                          <td>5 by 30 ft. line (Dex save)</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>Blue</td>\r\n                          <td>Lightning</td>\r\n                          <td>5 by 30 ft. line (Dex save)</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>Brass</td>\r\n                          <td>Fire</td>\r\n                          <td>5 by 30 ft. line (Dex save)</td>\r\n                        </tr>\r\n                        <tr>\r\n                          <td>Bronze</td>\r\n                          <td>Lightning</td>\r\n                          <td>5 by 30 ft. line (Dex save)</td>\r\n                        </tr>\r\n                      </tbody>\r\n                    </Table>\r\n                  </div>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"dwarf\">\r\n\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"hilldwarf\">\r\n\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"mountaindwarf\">\r\n\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"high elf\">\r\n\r\n                </Tab.Pane>\r\n              </Tab.Content>\r\n            </Tab.Container>\r\n          </div>\r\n        </Tab>\r\n        <Tab eventKey=\"class\" title=\"Class\">\r\n\r\n        </Tab>\r\n        <Tab eventKey=\"abilities\" title=\"Abilities\">\r\n          <div className='characterCreatorSection characterCreatorAbilities frontElement'>\r\n            <div className=\"abilityContainer abilityContainerDisplay frontElement\">\r\n              {abilities.map((ability, index) => \r\n                <div className=\"abilityBox\" key={index}>\r\n                  <div className=\"abilityLabel\">{ability.abilityabbrev}</div>\r\n                  <div className=\"abilityModDisplay\">{ability.abilityscore}</div>\r\n                  <div className=\"oval\">\r\n                    <h4>{ability.abilitybonus}</h4>\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div className=\"abilityContainer abilityContainerRoll frontElement\">\r\n              {tempvalues.map((temp, index) => \r\n                <div className=\"abilityBox\" key={index}>\r\n                  <Button>{temp}</Button>\r\n                  <select onChange={(e) => {updateSelections(e)}}>\r\n                    {selectabilities.map((ability, index) => <option key={index} value={ability}>{ability}</option>)}\r\n                  </select>\r\n                </div>\r\n              )}\r\n              <Button onClick={() => {setAbilityValues()}}>Set</Button>\r\n            </div>\r\n          </div>\r\n        </Tab>\r\n        <Tab eventKey=\"equipment\" title=\"Equipment\">\r\n\r\n        </Tab>\r\n        <Tab eventKey=\"description\" title=\"Description\">\r\n\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterCreator;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ActionsMenu.js",["242"],[],"import { Table } from \"react-bootstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\n\r\nfunction ActionsMenu({setRollResults}) {\r\n\r\n  \r\n  const [actions, setActions] = useState([\r\n    {\r\n      name: \"Mace\",\r\n      range: \"5 ft\",\r\n      hitdc: 5,\r\n      effectdie: 12,\r\n      effectdienum: 1,\r\n      effectbonus: 3,\r\n      notes: \"Simple\",\r\n    },\r\n    {\r\n      name: \"Dagger\",\r\n      range: \"20 (60)\",\r\n      hitdc: 6,\r\n      effectdie: 4,\r\n      effectdienum: 1,\r\n      effectbonus: 3,\r\n      notes: \"Simple, Light, Thrown\",\r\n    },\r\n    {\r\n      name: \"Unarmed Strike\",\r\n      range: \"5 ft\",\r\n      hitdc: 5,\r\n      effectdie: 0,\r\n      effectdienum: 0,\r\n      effectbonus: 4,\r\n      notes: \"\",\r\n    },\r\n  ]);\r\n\r\n\r\n  useEffect(() => {\r\n    getActions();\r\n  }, []\r\n  );\r\n\r\n  // Gets actions from the server\r\n  const getActions = () => {\r\n    console.log(\"Getting actions!\");\r\n  }\r\n\r\n  const modPos = (bonus) => {\r\n    if (bonus > 0) {\r\n      return `+ ${bonus}`;\r\n    } else if (bonus < 0) {\r\n      return `- ${bonus}`;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n\r\n  return ( \r\n    <div className=\"actionsMenu characterInventoryAreaSection\">\r\n      <div className=\"actionsSection\">\r\n        <span className=\"characterSheetSectionTitle\">Actions</span>\r\n        <Table size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Range</th>\r\n              <th>Hit/DC</th>\r\n              <th>Effect</th>\r\n              <th>Notes</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {actions.map((action, index) => \r\n              <tr key={index}>\r\n                <td>{action.name}</td>\r\n                <td>{action.range}</td>\r\n                <td><DiceRollButton name={action.name} rolltype={\"Attack\"} die={20} num={1} mod={action.hitdc} setRollResults={setRollResults} text={action.hitdc}></DiceRollButton></td>\r\n                <td><DiceRollButton name={action.name} rolltype={\"Damage\"} die={action.effectdie} num={action.effectdienum} mod={action.effectbonus} setRollResults={setRollResults} text={`${action.effectdienum}d${action.effectdie} ${modPos(action.effectbonus)} `}></DiceRollButton></td>\r\n                <td>{action.notes}</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"bonusActionsSection\">\r\n        <span className=\"characterSheet\">Actions</span>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ActionsMenu;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRollButton.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsMenu.js",["243","244","245","246","247","248"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsLevelSection.js",["249","250","251","252","253"],[],"import {useState, useEffect} from 'react';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton'; \r\n\r\nfunction SpellsLevelSection({level, numspellslots, savedc, spells, setRollResults}) {\r\n\r\n  const [spellslots, setSpellSlots] = useState([]);\r\n\r\n  const createSpellSlots = () => {\r\n    let slots = [];\r\n    console.log(`level - ${level}   numspellslots - ${numspellslots}`);\r\n    for (let i = 0; i < numspellslots; i++) {\r\n      console.log(\"spellslot\");\r\n      /*\r\n      let newspellslots = spellslots;\r\n      newspellslots.push(false);\r\n      setSpellSlots(newspellslots);\r\n      */\r\n      slots.push(false);\r\n      console.log(slots);\r\n    }\r\n    return slots;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setSpellSlots(createSpellSlots());\r\n    return () => {\r\n      console.log('This should clear the array');\r\n    }\r\n  }, []\r\n  );\r\n\r\n\r\n  const modPos = (bonus) => {\r\n    if (bonus > 0) {\r\n      return `+ ${bonus}`;\r\n    } else if (bonus < 0) {\r\n      return `- ${bonus}`;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  const titleHandler = (level) => {\r\n    switch (level) {\r\n      case 0:\r\n        return \"Cantrips\";\r\n        break;\r\n      case 1:\r\n        return \"1st Level\";\r\n        break;\r\n      case 2:\r\n        return \"2nd Level\";\r\n        break;\r\n      case 3:\r\n        return \"3rd Level\";\r\n        break;\r\n      default:\r\n        return `${level}th Level`\r\n    }\r\n  }\r\n\r\n\r\n  const hitDcHandler = (spell) => {\r\n    if (spell.hitdcroll === false) {\r\n      if (spell.hitdc !== \"\") {\r\n        return `${spell.hitdc} ${savedc}`;\r\n      }\r\n    }\r\n    return spell.hitdc; \r\n  }\r\n\r\n  const effectHandler = (spell) => {\r\n    let text = `${spell.effectdienum}d${spell.effectdie}${modPos(spell.effectdiemod)}`;\r\n    if (spell.effectdie === 0 || spell.effectdienum === 0) {\r\n      return spell.effect;\r\n    } else {\r\n      return <DiceRollButton name={spell.name} rolltype={spell.effect} die={spell.effectdie} num={spell.effectdienum} mod={spell.effectdiemod} setRollResults={setRollResults} text={text}></DiceRollButton>\r\n    }\r\n  }\r\n\r\n\r\n  return ( \r\n    <div className=\"spellsLevelSection\">\r\n      <div className=\"spellsLevelSectionHeader\">\r\n        <span className=\"characterSheetSectionTitle\">{titleHandler(level)}</span>\r\n        <div className=\"spellsHeaderRightSection\">\r\n          <Button size=\"sm\" variant='secondary'>Clear</Button>\r\n          <div className=\"spellHeaderSpellSlots\">\r\n            {spellslots.map((spellslot, index) => <input type=\"checkbox\" key={index} value={spellslot}></input>)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Table size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <td></td>\r\n            <th>Name</th>\r\n            <th>Time</th>\r\n            <th>Range</th>\r\n            <th>Hit/DC</th>\r\n            <th>Effect</th>\r\n            <th>Notes</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {spells.map((spell, index) => \r\n            <tr key={index}>\r\n              <td><Button size='sm'>Cast</Button></td>\r\n              <td>{spell.name}</td>\r\n              <td>{spell.timetocast}</td>\r\n              <td>{spell.range}</td>\r\n              <td>{hitDcHandler(spell)}</td>\r\n              <td>{effectHandler(spell)}</td>\r\n              <td>{spell.notes}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpellsLevelSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventoryMenu.js",["254"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventorySection.js",["255"],[],{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":6,"column":8,"nodeType":"260","messageId":"261","endLine":6,"endColumn":22},{"ruleId":"258","severity":1,"message":"262","line":13,"column":8,"nodeType":"260","messageId":"261","endLine":13,"endColumn":18},{"ruleId":"258","severity":1,"message":"263","line":14,"column":8,"nodeType":"260","messageId":"261","endLine":14,"endColumn":24},{"ruleId":"258","severity":1,"message":"264","line":38,"column":9,"nodeType":"260","messageId":"261","endLine":38,"endColumn":19},{"ruleId":"258","severity":1,"message":"265","line":1,"column":17,"nodeType":"260","messageId":"261","endLine":1,"endColumn":26},{"ruleId":"266","severity":1,"message":"267","line":55,"column":6,"nodeType":"268","endLine":55,"endColumn":8,"suggestions":"269"},{"ruleId":"258","severity":1,"message":"265","line":1,"column":17,"nodeType":"260","messageId":"261","endLine":1,"endColumn":26},{"ruleId":"258","severity":1,"message":"270","line":1,"column":17,"nodeType":"260","messageId":"261","endLine":1,"endColumn":26},{"ruleId":"258","severity":1,"message":"271","line":1,"column":21,"nodeType":"260","messageId":"261","endLine":1,"endColumn":29},{"ruleId":"258","severity":1,"message":"272","line":3,"column":8,"nodeType":"260","messageId":"261","endLine":3,"endColumn":10},{"ruleId":"273","severity":1,"message":"274","line":47,"column":7,"nodeType":"275","messageId":"276","endLine":47,"endColumn":39},{"ruleId":"258","severity":1,"message":"277","line":7,"column":8,"nodeType":"260","messageId":"261","endLine":7,"endColumn":26},{"ruleId":"258","severity":1,"message":"278","line":2,"column":17,"nodeType":"260","messageId":"261","endLine":2,"endColumn":23},{"ruleId":"258","severity":1,"message":"279","line":6,"column":10,"nodeType":"260","messageId":"261","endLine":6,"endColumn":23},{"ruleId":"258","severity":1,"message":"280","line":6,"column":25,"nodeType":"260","messageId":"261","endLine":6,"endColumn":41},{"ruleId":"258","severity":1,"message":"281","line":1,"column":10,"nodeType":"260","messageId":"261","endLine":1,"endColumn":15},{"ruleId":"258","severity":1,"message":"278","line":1,"column":17,"nodeType":"260","messageId":"261","endLine":1,"endColumn":23},{"ruleId":"258","severity":1,"message":"281","line":13,"column":10,"nodeType":"260","messageId":"261","endLine":13,"endColumn":15},{"ruleId":"258","severity":1,"message":"278","line":13,"column":17,"nodeType":"260","messageId":"261","endLine":13,"endColumn":23},{"ruleId":"258","severity":1,"message":"282","line":14,"column":8,"nodeType":"260","messageId":"261","endLine":14,"endColumn":22},{"ruleId":"258","severity":1,"message":"283","line":3,"column":9,"nodeType":"260","messageId":"261","endLine":3,"endColumn":18},{"ruleId":"258","severity":1,"message":"284","line":1,"column":31,"nodeType":"260","messageId":"261","endLine":1,"endColumn":42},{"ruleId":"258","severity":1,"message":"270","line":1,"column":10,"nodeType":"260","messageId":"261","endLine":1,"endColumn":19},{"ruleId":"258","severity":1,"message":"271","line":1,"column":21,"nodeType":"260","messageId":"261","endLine":1,"endColumn":29},{"ruleId":"258","severity":1,"message":"270","line":1,"column":20,"nodeType":"260","messageId":"261","endLine":1,"endColumn":29},{"ruleId":"258","severity":1,"message":"285","line":6,"column":23,"nodeType":"260","messageId":"261","endLine":6,"endColumn":37},{"ruleId":"258","severity":1,"message":"270","line":1,"column":10,"nodeType":"260","messageId":"261","endLine":1,"endColumn":19},{"ruleId":"258","severity":1,"message":"286","line":8,"column":25,"nodeType":"260","messageId":"261","endLine":8,"endColumn":41},{"ruleId":"258","severity":1,"message":"278","line":1,"column":10,"nodeType":"260","messageId":"261","endLine":1,"endColumn":16},{"ruleId":"258","severity":1,"message":"282","line":2,"column":8,"nodeType":"260","messageId":"261","endLine":2,"endColumn":22},{"ruleId":"258","severity":1,"message":"262","line":3,"column":8,"nodeType":"260","messageId":"261","endLine":3,"endColumn":18},{"ruleId":"258","severity":1,"message":"287","line":4,"column":8,"nodeType":"260","messageId":"261","endLine":4,"endColumn":22},{"ruleId":"258","severity":1,"message":"288","line":8,"column":22,"nodeType":"260","messageId":"261","endLine":8,"endColumn":35},{"ruleId":"258","severity":1,"message":"289","line":12,"column":21,"nodeType":"260","messageId":"261","endLine":12,"endColumn":37},{"ruleId":"258","severity":1,"message":"290","line":9,"column":19,"nodeType":"260","messageId":"261","endLine":9,"endColumn":29},{"ruleId":"258","severity":1,"message":"278","line":1,"column":10,"nodeType":"260","messageId":"261","endLine":1,"endColumn":16},{"ruleId":"258","severity":1,"message":"291","line":1,"column":18,"nodeType":"260","messageId":"261","endLine":1,"endColumn":23},{"ruleId":"258","severity":1,"message":"282","line":3,"column":8,"nodeType":"260","messageId":"261","endLine":3,"endColumn":22},{"ruleId":"258","severity":1,"message":"292","line":11,"column":21,"nodeType":"260","messageId":"261","endLine":11,"endColumn":33},{"ruleId":"258","severity":1,"message":"293","line":22,"column":18,"nodeType":"260","messageId":"261","endLine":22,"endColumn":27},{"ruleId":"258","severity":1,"message":"294","line":112,"column":9,"nodeType":"260","messageId":"261","endLine":112,"endColumn":19},{"ruleId":"266","severity":1,"message":"295","line":30,"column":6,"nodeType":"268","endLine":30,"endColumn":8,"suggestions":"296"},{"ruleId":"297","severity":1,"message":"298","line":48,"column":9,"nodeType":"299","messageId":"300","endLine":48,"endColumn":15},{"ruleId":"297","severity":1,"message":"298","line":51,"column":9,"nodeType":"299","messageId":"300","endLine":51,"endColumn":15},{"ruleId":"297","severity":1,"message":"298","line":54,"column":9,"nodeType":"299","messageId":"300","endLine":54,"endColumn":15},{"ruleId":"297","severity":1,"message":"298","line":57,"column":9,"nodeType":"299","messageId":"300","endLine":57,"endColumn":15},{"ruleId":"258","severity":1,"message":"301","line":42,"column":17,"nodeType":"260","messageId":"261","endLine":42,"endColumn":25},{"ruleId":"266","severity":1,"message":"302","line":12,"column":6,"nodeType":"268","endLine":12,"endColumn":13,"suggestions":"303"},"no-new-object",["304"],"no-unused-vars","'StaticStatsBox' is defined but never used.","Identifier","unusedVar","'AbilityBox' is defined but never used.","'ManualDiceRoller' is defined but never used.","'handleText' is assigned a value but never used.","'Component' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAbilities'. Either include it or remove the dependency array.","ArrayExpression",["305"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'io' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'RollResultsSection' is defined but never used.","'Button' is defined but never used.","'oldbuttonvals' is assigned a value but never used.","'setOldButtonVals' is assigned a value but never used.","'Stack' is defined but never used.","'DiceRollButton' is defined but never used.","'MapCanvas' is assigned a value but never used.","'useCallback' is defined but never used.","'setLogMessages' is assigned a value but never used.","'setMonsterGroups' is assigned a value but never used.","'AbilitySection' is defined but never used.","'settempvalues' is assigned a value but never used.","'setAbilityScores' is assigned a value but never used.","'setActions' is assigned a value but never used.","'Table' is defined but never used.","'setSpellInfo' is assigned a value but never used.","'setSpells' is assigned a value but never used.","'handleCast' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createSpellSlots'. Either include it or remove the dependency array.",["306"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'setItems' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'calculateWeight'. Either include it or remove the dependency array.",["307"],"no-object-constructor",{"desc":"308","fix":"309"},{"desc":"310","fix":"311"},{"desc":"312","fix":"313"},"Update the dependencies array to be: [getAbilities]",{"range":"314","text":"315"},"Update the dependencies array to be: [createSpellSlots]",{"range":"316","text":"317"},"Update the dependencies array to be: [calculateWeight, items]",{"range":"318","text":"319"},[1240,1242],"[getAbilities]",[859,861],"[createSpellSlots]",[360,367],"[calculateWeight, items]"]