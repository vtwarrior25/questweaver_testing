[{"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\index.js":"1","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\App.js":"2","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\reportWebVitals.js":"3","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DiceRollButton.js":"4","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillSection.js":"5","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillRow.js":"6","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilitySection.js":"7","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilityBox.js":"8","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SingleRollResult.js":"9","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\RollResultsSection.js":"10","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\HealthSection.js":"11","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterSheet.js":"12","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\StaticStatsBox.js":"13","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRoller.js":"14","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterInventoryArea.js":"15","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrowSection.js":"16","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrow.js":"17","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DefensesConditionsBox.js":"18","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MapSection.js":"19","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Map.js":"20","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderBox.js":"21","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderItem.js":"22","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chatbox.js":"23","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chat.js":"24","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ChatMessage.js":"25","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLog.js":"26","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLogMessage.js":"27"},{"size":536,"mtime":1699034410573,"results":"28","hashOfConfig":"29"},{"size":2802,"mtime":1706478286383,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":1699032879980,"results":"31","hashOfConfig":"29"},{"size":1075,"mtime":1706327171336,"results":"32","hashOfConfig":"29"},{"size":1330,"mtime":1706325903865,"results":"33","hashOfConfig":"29"},{"size":545,"mtime":1701490922816,"results":"34","hashOfConfig":"29"},{"size":1039,"mtime":1706325834419,"results":"35","hashOfConfig":"29"},{"size":497,"mtime":1706475327959,"results":"36","hashOfConfig":"29"},{"size":623,"mtime":1706327351513,"results":"37","hashOfConfig":"29"},{"size":1241,"mtime":1701490370598,"results":"38","hashOfConfig":"29"},{"size":3256,"mtime":1706336108041,"results":"39","hashOfConfig":"29"},{"size":1802,"mtime":1706475360020,"results":"40","hashOfConfig":"29"},{"size":1913,"mtime":1706333846997,"results":"41","hashOfConfig":"29"},{"size":4380,"mtime":1706336209850,"results":"42","hashOfConfig":"29"},{"size":716,"mtime":1706333165849,"results":"43","hashOfConfig":"29"},{"size":2755,"mtime":1706336087014,"results":"44","hashOfConfig":"29"},{"size":406,"mtime":1706335353976,"results":"45","hashOfConfig":"29"},{"size":985,"mtime":1706476159728,"results":"46","hashOfConfig":"29"},{"size":479,"mtime":1706506400643,"results":"47","hashOfConfig":"29"},{"size":156,"mtime":1706506468897,"results":"48","hashOfConfig":"29"},{"size":1903,"mtime":1706506446893,"results":"49","hashOfConfig":"29"},{"size":353,"mtime":1706480836327,"results":"50","hashOfConfig":"29"},{"size":532,"mtime":1706505054398,"results":"51","hashOfConfig":"29"},{"size":1957,"mtime":1706505935917,"results":"52","hashOfConfig":"29"},{"size":256,"mtime":1706506142499,"results":"53","hashOfConfig":"29"},{"size":1157,"mtime":1706505418986,"results":"54","hashOfConfig":"29"},{"size":313,"mtime":1706504862643,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1dx4dds",{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"59"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"59"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"59"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"59"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"59"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"59"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"59"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"59"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"59"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"59"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"122","messages":"123","suppressedMessages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"140","messages":"141","suppressedMessages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"143","messages":"144","suppressedMessages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","suppressedMessages":"148","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\index.js",[],[],["149"],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\App.js",["150","151","152","153","154","155","156"],[],"// React Imports\nimport React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport RollResultsSection from \"./RollResultsSection\";\nimport CharacterSheet from \"./CharacterSheet\";\nimport StaticStatsBox from \"./StaticStatsBox\";\nimport MapSection from \"./MapSection\";\n\n// React-Bootstrap Imports\nimport { Button, Col, Container, FormCheck, Offcanvas, Row, Stack, Tab, Tabs }from 'react-bootstrap'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport AbilityBox from \"./AbilityBox\";\nimport ManualDiceRoller from \"./ManualDiceRoller\";\n\n\nfunction App () {\n  const [rollresults, setRollResults] = useState({\n    rolls: [],\n    rollstring: \"\",\n    rolltotal: \"\",\n    basestring: \"\",\n    name: \"\",\n    rolltype: \"\",\n  });\n\n  const [showboxes, setShowBoxes] = useState({\n    showAbilitySection: true,\n    showHealthSection: true,\n    showStaticStatsBox: true,\n    showManualDiceRoller: true,\n    showSavingThrowSection: true,\n    showSkillSection: true,\n    showCharacterInventoryArea: true,\n  })\n\n  useEffect(() => {\n    console.log(showboxes);\n  }, [showboxes])\n\n  const [showToggleMenu, setShowToggleMenu] = useState(false);\n\n  const toggleMenuClose = () => setShowToggleMenu(false);\n  const toggleMenuOpen = () => setShowToggleMenu(true);\n\n\n  /*\n  <SkillSection setRollResults={setRollResults} rollresults={rollresults}/>\n  <AbilitySection setRollResults={setRollResults} rollresults={rollresults}/>\n  */\n  return (\n    <div className=\"App\">\n      <Container fluid>\n        <Tabs className=\"frontElement\" defaultActiveKey='jerome' id=\"testingTabs\">\n            <Tab eventKey='monster' title='Monster'>\n              Monster Sheet\n            </Tab>\n            <Tab eventKey='jerome' title='Jerome'>\n              <div className='sheetAndMap'>\n                <CharacterSheet showboxes={showboxes} setShowBoxes={setShowBoxes} setRollResults={setRollResults} rollresults={rollresults}></CharacterSheet>\n                <MapSection></MapSection>\n                <RollResultsSection rollresults={rollresults}/>\n              </div>\n            </Tab>\n        </Tabs>\n        <Button onClick={toggleMenuOpen}>&</Button>\n      </Container>\n      <Offcanvas show={showToggleMenu} onHide={toggleMenuClose}>\n        <Offcanvas.Header closeButton>\n          <Offcanvas.Title>Offcanvas</Offcanvas.Title>\n        </Offcanvas.Header>\n        <Offcanvas.Body>\n          <label for=\"showAbilitySection\">Ability</label>\n          <input type='checkbox' name='showAbilitySection' value={showboxes.showAbilitySection} onChange={(e) => {setShowBoxes({...showboxes, showAbilitySection: e.target.value})}}></input>\n        </Offcanvas.Body>\n      </Offcanvas>\n    </div>\n  );\n}\n\n/*\nDice Rolll API Testing URL\nhttp://localhost:9000/rollcheck?name=Strength&rolltype=Ability&die=20&num=1&mod=2\n*/\n\nexport default App;\n","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\reportWebVitals.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DiceRollButton.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillSection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillRow.js",["157"],[],"import React, { Component } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\nfunction SkillRow ({name, mod, prof, bonus, setRollResults}) {\r\n\r\n  return (\r\n  <tr>\r\n    <td><input type=\"checkbox\" readOnly={true} checked={prof}></input></td>\r\n    <td className=\"skillMod\">{mod}</td>\r\n    <td className=\"skillName\">{name}</td>\r\n    <td className=\"skillBonus\">\r\n      <DiceRollButton name={name} rolltype=\"Skill\" die=\"20\" num=\"1\" mod={bonus} setRollResults={setRollResults}/>\r\n    </td>\r\n  </tr>\r\n  );\r\n\r\n}\r\n\r\nexport default SkillRow;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilitySection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilityBox.js",["158"],[],"import React, { Component } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\nfunction AbilityBox ({name, abbrev, bonus, score, setRollResults}) {\r\n  return (\r\n    <div className=\"abilityBox\">\r\n      <div className=\"abilityLabel\">{abbrev}</div>\r\n      <DiceRollButton name={name} rolltype=\"Ability\" die=\"20\" num=\"1\" mod={bonus} setRollResults={setRollResults}/>\r\n      <div className=\"oval\">\r\n        <h4>{score}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AbilityBox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SingleRollResult.js",["159"],[],"import React, { useEffect } from \"react\";\r\n\r\nfunction SingleRollResult ({rollresults}) {\r\n\r\n  return (\r\n    <div className=\"rollResults\" id=\"rollResult1\">\r\n      <div className=\"rollDescription\" id=\"rollDescription1\">{rollresults.rollresults.name} - {rollresults.rollresults.rolltype}</div>\r\n      <div className=\"rollParts\" id=\"rollParts1\">{rollresults.rollresults.rollstring}</div>\r\n      <div className=\"rollBase\" id=\"rollBase1\">{rollresults.rollresults.basestring}</div>\r\n      <div className=\"rollTotal\" id=\"rollTotal1\">{rollresults.rollresults.rolltotal}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleRollResult;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\RollResultsSection.js",["160","161","162"],[],"import { useEffect, useState } from 'react';\r\nimport SingleRollResult from './SingleRollResult';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nexport default function RollResultsSection (rollresults) {\r\n  /*\r\n  const [rolllist, setRollList] = useState([\r\n    {\r\n      rolls: [ 8 ],\r\n      rollstring: '8+2',\r\n      rolltotal: 10,\r\n      basestring: '1d20+2',\r\n      name: 'Constitution',\r\n      rolltype: 'Ability'\r\n    },\r\n    {\r\n      rolls: [ 8 ],\r\n      rollstring: '8+2',\r\n      rolltotal: 10,\r\n      basestring: '1d20+2',\r\n      name: 'Constitution',\r\n      rolltype: 'Ability'\r\n    }\r\n  ]);\r\n  \r\n  const [beans, setBeans] = useState('Beans brother');\r\n  const socket = io.connect('http://localhost:4000');\r\n  */\r\n\r\n  /*useEffect(() => {\r\n    socket.on('rolldiceresult', (data) => {\r\n      \r\n      setRollList(...rolllist, data);\r\n      console.log(`Rolllist:  ${rolllist}`);\r\n      \r\n      setBeans('b');\r\n  })});\r\n  */\r\n//{rolllist.map((roll) => <SingleRollResult name={roll.name} rolltype={roll.rolltype} rollstring={roll.rollstring} basestring={roll.basestring} rolltotal={roll.rolltotal}/>)}\r\n\r\n  return (\r\n      <div id=\"rollContainer\">\r\n        <SingleRollResult rollresults={rollresults}></SingleRollResult>\r\n      </div> \r\n  )\r\n}\r\n","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\HealthSection.js",["163"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\n\r\nfunction HealthSection () {\r\n  const [healthval, setHealthVal] = useState({\r\n    currenthealth: 11,\r\n    maxhealth: 22\r\n  })\r\n\r\n  const [healthmod, setHealthMod] = useState(0);\r\n\r\n  useEffect(() => {  \r\n      getHealth();\r\n    }, []\r\n  )  \r\n\r\n  useEffect(() => {\r\n      setHealth();\r\n    }, [healthval.currenthealth]\r\n  )\r\n\r\n  useEffect(() => {\r\n    console.log(`healthmod ${healthmod}`); \r\n    }, [healthmod]\r\n  )\r\n\r\n  const handleChange = (e) => {\r\n    console.log(`healthmod ${healthmod}`);\r\n    setHealthMod(e.target.value);\r\n    console.log(`healthmod ${healthmod}`);\r\n  }\r\n\r\n  const updateHealth = (option) => {\r\n    /*let newhealthobj = {\r\n      currenthealth: healthval.currenthealth,\r\n      maxhealth: healthval.maxhealth\r\n    }*/\r\n    let currenthealth = Number(healthval.currenthealth);\r\n    let newhealth = 0;\r\n    if (option === 'heal') {\r\n      newhealth = Number(currenthealth) + Number(healthmod);\r\n      console.log(`${newhealth} = ${currenthealth} + ${healthmod}`)\r\n    } else if (option === 'damage') {\r\n      console.log(`${newhealth} = ${currenthealth} - ${healthmod}`)\r\n      newhealth = Number(currenthealth) - Number(healthmod);\r\n    } else {\r\n      throw \"Shit's fucked brothers!\";\r\n    }\r\n    //newhealthobj.currenthealth = newhealth;\r\n    setHealthVal({...healthval, currenthealth: newhealth});\r\n    console.log(\"Current Health: \" + currenthealth + \"  HealthMod: \" + healthmod + \" NewHealth: \" + newhealth);\r\n    //addLogEntry(`Health: ${currenthealth} -> ${newhealth}`);\r\n    //document.getElementById(\"currentHealth\").value = newhealth;\r\n  }\r\n\r\n  const getHealth = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=health`)\r\n    .then(res => res.json())\r\n    .then(res => setHealthVal(res));\r\n  }\r\n\r\n  const setHealth = () => {\r\n    console.log('sethealth');\r\n    //fetch(`http://localhost:9000/sendcharacterinfo?infotype=health&currenthealth=${healthval.currenthealth}`);\r\n  }\r\n\r\n  return ( \r\n    <div className=\"healthSection frontElement\">\r\n      <Stack className=\"leftHealthSection\" direction=\"vertical\" gap={2}>\r\n        <Button variant='secondary' size='sm' onClick={() => updateHealth('heal')} >Heal</Button>\r\n        <input type='number' size=\"4\" onChange={(e) => handleChange(e)}></input>\r\n        <Button variant='secondary' size='sm' onClick={() => updateHealth('damage')} >Damage</Button>\r\n      </Stack>\r\n      <div className=\"rightHealthSection\">\r\n        <span className='characterSheetSectionTitle'>Hit Points</span>\r\n        <Stack direction=\"horizontal\" gap={1}>\r\n          <div className=\"healthBox\">\r\n            <label htmlFor=\"currenthealth\">Current</label>\r\n            <input name=\"currenthealth\" type=\"number\" size=\"4\" value={healthval.currenthealth} onChange={(e) => setHealthVal({...healthval, currenthealth: e.target.value})}></input>\r\n          </div>\r\n          <div className=\"healthBox\">\r\n            <label htmlFor=\"maxhealth\">Max</label>\r\n            <input name=\"maxhealth\" type=\"number\" size=\"4\" readOnly={true} value={healthval.maxhealth}></input>\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n      \r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default HealthSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterSheet.js",["164"],[],"import { useEffect } from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport AbilitySection from './AbilitySection';\r\nimport HealthSection from './HealthSection';\r\nimport SkillSection from './SkillSection';\r\nimport StaticStatsBox from './StaticStatsBox';\r\nimport RollResultsSection from './RollResultsSection';\r\nimport ManualDiceRoller from './ManualDiceRoller';\r\nimport CharacterInventoryArea from './CharacterInventoryArea';\r\nimport SavingThrowSection from './SavingThrowSection'\r\nimport DefensesConditionsBox from './DefensesConditionsBox';\r\n\r\nfunction CharacterSheet({showboxes, setShowBoxes, setRollResults, rollresults}) {\r\n  \r\n  useEffect(() => {\r\n    console.log('Updating visibility');\r\n  }, [showboxes]);\r\n  \r\n  return ( \r\n    <div>\r\n      <Row>\r\n        <Col>\r\n          {showboxes.showAbilitySection && <AbilitySection show={showboxes.AbilitySection} setRollResults={setRollResults} rollresults={rollresults}/>}\r\n        </Col>\r\n        <Col>\r\n          <HealthSection></HealthSection>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <StaticStatsBox setRollResults={setRollResults} rollresults={rollresults}></StaticStatsBox>\r\n        </Col>\r\n      </Row>\r\n      <Row>\r\n        <Col>\r\n          <DefensesConditionsBox></DefensesConditionsBox>\r\n          <ManualDiceRoller></ManualDiceRoller>\r\n        </Col> \r\n        <Col>\r\n          <SavingThrowSection setRollResults={setRollResults} rollresults={rollresults}></SavingThrowSection>\r\n        </Col>\r\n      </Row>    \r\n      <Row>\r\n        <Col>\r\n          <SkillSection setRollResults={setRollResults} rollresults={rollresults}/>\r\n        </Col>\r\n        <Col>\r\n          <CharacterInventoryArea></CharacterInventoryArea>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterSheet;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\StaticStatsBox.js",["165"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton';\r\n\r\nfunction StaticStatsBox (setRollResults, rollresults) { \r\n  const [staticstats, setStaticStats] = useState({\r\n      profbonus: 2,\r\n      speed: 30,\r\n      initiative: 2,\r\n      armorclass: 14,\r\n      perception: 5,\r\n      investigation: 5,\r\n      insight: 5,\r\n      armor: \"Light, Medium, Shields\",\r\n      weapons: \"Martial, Simple\",\r\n      tools: \"Cobbler's, Land Vehicles\",\r\n      languages: \"Common, Halfling\",\r\n    });\r\n\r\n  useEffect(() => {  \r\n      getStats();\r\n    }, []\r\n  )\r\n\r\n\r\n  const getStats = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=staticstats`)\r\n    .then(res => res.json())\r\n    .then(res => setStaticStats(res));\r\n  }\r\n\r\n  return ( \r\n    <div className=\"staticStatsBox frontElement\">\r\n      <Stack className=\"statsContainer senses\" gap={1}>\r\n        <div>Perception - {staticstats.perception}</div>\r\n        <div>Investigation - {staticstats.investigation}</div>\r\n        <div>Insight - {staticstats.insight}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer generalStats\" gap={1}>\r\n        <div>Proficiency Bonus - {staticstats.profbonus}</div>\r\n        <div>Speed - {staticstats.speed}</div>\r\n        <div>Initiative - <DiceRollButton name=\"Initiative\" rolltype=\"Stat\" die=\"20\" num=\"1\" mod={staticstats.initiative} setRollResults={setRollResults}>{staticstats.initiative}</DiceRollButton></div>\r\n        <div>Armor Class - {staticstats.armorclass}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer proficiencies\">\r\n        <div>Armor - {staticstats.armor}</div>\r\n        <div>Weapons - {staticstats.weapons}</div>\r\n        <div>Tools - {staticstats.tools}</div>\r\n        <div>Languages - {staticstats.languages}</div>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StaticStatsBox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRoller.js",["166","167","168","169"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\n\r\nfunction ManualDiceRoller () {\r\n  const [buttonvals, setButtonVals] = useState({\r\n    d20: 0,\r\n    d12: 0,\r\n    d10: 0,\r\n    d8: 0,\r\n    d6: 0,\r\n    d4: 0,\r\n  })\r\n\r\n\r\n/*\r\n  useEffect(() => {  \r\n      getHealth();\r\n    }, []\r\n  )  \r\n  \r\n  useEffect(() => {\r\n      setHealth();\r\n    }, [healthval.currenthealth]\r\n  )\r\n  */\r\n  useEffect(() => {\r\n    console.log(`buttonvals ${buttonvals}`); \r\n    }, [buttonvals]\r\n  )\r\n  \r\n  /*\r\n  const handleChange = (e) => {\r\n    setButtonVals({...buttonvals, e.target.type: e.target.value});\r\n  }\r\n  */\r\n\r\n  const resetButtons = () => {\r\n    setButtonVals({\r\n      d20: 0,\r\n      d12: 0,\r\n      d10: 0,\r\n      d8: 0,\r\n      d6: 0,\r\n      d4: 0,\r\n    })\r\n  }\r\n\r\n  const updateButtons = (type, sign) => {\r\n    var buttonvalue = buttonvals[`${type}`] ?? 0; \r\n    if (sign === 'plus') {\r\n      buttonvalue++;\r\n    } else if (sign === 'minus' && buttonvalue > 0) {\r\n      buttonvalue--;\r\n    }\r\n    switch (type) {\r\n      case 'd20':\r\n        setButtonVals({...buttonvals, d20:buttonvalue});\r\n        break;\r\n      case 'd12':\r\n        setButtonVals({...buttonvals, d12:buttonvalue});\r\n        break;\r\n      case 'd10':\r\n        setButtonVals({...buttonvals, d10:buttonvalue});\r\n        break;\r\n      case 'd8':\r\n        setButtonVals({...buttonvals, d8:buttonvalue});\r\n        break;\r\n      case 'd6':\r\n        setButtonVals({...buttonvals, d6:buttonvalue});\r\n        break;\r\n      case 'd4':\r\n        setButtonVals({...buttonvals, d4:buttonvalue});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    //addLogEntry(`Health: ${currenthealth} -> ${newhealth}`);\r\n    //document.getElementById(\"currentHealth\").value = newhealth;\r\n  }\r\n\r\n  const callCheckAPI = () => {\r\n    let name = 'Manual';\r\n    let rolltype = \"Manual\";\r\n    let mod = 0;\r\n    /*\r\n    fetch(`http://localhost:9000/rollcheck?name=${name}&rolltype=${rolltype}&die=${die}&num=${num}&mod=${mod}`)\r\n        .then(res => res.json())\r\n        .then(res => setRollData(res))\r\n        .then(setRollResults(rolldata))\r\n        .then(console.log(rolldata));\r\n    */\r\n  }\r\n\r\n  return ( \r\n    <div className=\"manualDiceRollSection frontElement\">\r\n      <Stack className=\"charManualDiceRollButtons\" direction=\"vertical\" gap={1}>\r\n        <Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d20', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d20', 'minus')}}>\r\n          <span>d20</span>\r\n          <span>{buttonvals.d20}</span>\r\n        </Button>\r\n        <Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d12', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d12', 'minus')}}>\r\n          <span>d12</span>\r\n          <span>{buttonvals.d12}</span>\r\n        </Button>\r\n        <Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d10', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d10', 'minus')}}>\r\n          <span>d10</span>\r\n          <span>{buttonvals.d10}</span>\r\n        </Button>\r\n        <Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d8', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d8', 'minus')}}>\r\n          <span>d8</span>\r\n          <span>{buttonvals.d8}</span>\r\n        </Button>\r\n        <Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d6', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d6', 'minus')}}>\r\n          <span>d6</span>\r\n          <span>{buttonvals.d6}</span>\r\n        </Button>\r\n        <Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d4', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d4', 'minus')}}>\r\n          <span>d4</span>\r\n          <span>{buttonvals.d4}</span>\r\n        </Button>\r\n      </Stack>\r\n      <Stack className=\"rightHealthSection\" direction=\"vertical\" gap={1}>\r\n        <Button variant='secondary' size='sm'>Roll</Button>\r\n        <Button variant='secondary' size='sm' onClick={() => resetButtons()}>Reset</Button>\r\n      </Stack>\r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default ManualDiceRoller;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterInventoryArea.js",["170","171"],[],"import { Stack, Button, Tab, Tabs } from 'react-bootstrap';\r\n\r\nfunction CharacterInventoryArea() {\r\n  return ( \r\n    <div className=\"characterInventoryArea frontElement\">\r\n      <Tabs defaultActiveKey='actions'>\r\n        <Tab eventKey='actions' title=\"Actions\">  \r\n          Actions\r\n        </Tab>\r\n        <Tab eventKey='spells' title=\"Spells\">\r\n          Spells\r\n        </Tab>\r\n        <Tab eventKey='inventory' title=\"Inventory\">\r\n          Inventory\r\n        </Tab>\r\n        <Tab eventKey='features' title=\"Features\">\r\n          Features\r\n        </Tab>\r\n        <Tab eventKey='notes' title=\"Notes\">\r\n          Notes\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterInventoryArea;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrowSection.js",["172","173","174"],[],"/*\r\n  return ( \r\n    <div className=\"characterSavingThrowSection frontElement\">\r\n      <Stack className=\"characterSavingThrowLeft\" direction=\"vertical\" gap={1}>\r\n        <div className=\"characterSavingThrow\"></div>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton'\r\nimport SavingThrow from './SavingThrow';\r\n\r\nfunction SavingThrowSection ({setRollResults}) { \r\n  const [savingthrows, setSavingThrows] = useState([\r\n    {\r\n      name: 'STR',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'DEX',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'CON',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'INT',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'WIS',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'CHA',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    ]);\r\n\r\n  useEffect(() => {  \r\n      getStats();\r\n    }, []\r\n  )\r\n\r\n\r\n  const getStats = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=savingthrow`)\r\n    .then(res => res.json())\r\n    .then(res => setSavingThrows(res));\r\n  }\r\n\r\n  return (\r\n    /* \r\n    <div className=\"staticStatsBox frontElement\">\r\n      <Stack className=\"statsContainer senses\" gap={1}>\r\n        <div>Perception - {staticstats.perception}</div>\r\n        <div>Investigation - {staticstats.investigation}</div>\r\n        <div>Insight - {staticstats.insight}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer generalStats\" gap={1}>\r\n        <div>Proficiency Bonus - {staticstats.profbonus}</div>\r\n        <div>Speed - {staticstats.speed}</div>\r\n        <div>Initiative - <DiceRollButton name=\"Initiative\" rolltype=\"Stat\" die=\"20\" num=\"1\" mod={staticstats.initiative} setRollResults={setRollResults}>{staticstats.initiative}</DiceRollButton></div>\r\n        <div>Armor Class - {staticstats.armorclass}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer proficiencies\">\r\n        <div>Armor - {staticstats.armor}</div>\r\n        <div>Weapons - {staticstats.weapons}</div>\r\n        <div>Tools - {staticstats.tools}</div>\r\n        <div>Languages - {staticstats.languages}</div>\r\n      </Stack>\r\n    </div>\r\n    */\r\n    <div className=\"characterSavingThrowSectionBox frontElement\">\r\n      <span className='characterSheetSectionTitle'>Saving Throws</span>\r\n      <div className=\"characterSavingThrowSection\">\r\n        {savingthrows.map((savingthrow) => <SavingThrow key={savingthrow.name} name={savingthrow.name} prof={savingthrow.prof} val={savingthrow.val} setRollResults={setRollResults}/>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SavingThrowSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrow.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DefensesConditionsBox.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MapSection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Map.js",["175"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderBox.js",["176","177"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderItem.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chatbox.js",["178","179"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chat.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ChatMessage.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLog.js",["180","181"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLogMessage.js",[],[],{"ruleId":"182","replacedBy":"183"},{"ruleId":"184","severity":1,"message":"185","line":6,"column":8,"nodeType":"186","messageId":"187","endLine":6,"endColumn":22},{"ruleId":"184","severity":1,"message":"188","line":10,"column":18,"nodeType":"186","messageId":"187","endLine":10,"endColumn":21},{"ruleId":"184","severity":1,"message":"189","line":10,"column":34,"nodeType":"186","messageId":"187","endLine":10,"endColumn":43},{"ruleId":"184","severity":1,"message":"190","line":10,"column":56,"nodeType":"186","messageId":"187","endLine":10,"endColumn":59},{"ruleId":"184","severity":1,"message":"191","line":10,"column":61,"nodeType":"186","messageId":"187","endLine":10,"endColumn":66},{"ruleId":"184","severity":1,"message":"192","line":12,"column":8,"nodeType":"186","messageId":"187","endLine":12,"endColumn":18},{"ruleId":"184","severity":1,"message":"193","line":13,"column":8,"nodeType":"186","messageId":"187","endLine":13,"endColumn":24},{"ruleId":"184","severity":1,"message":"194","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"194","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"195","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":26},{"ruleId":"184","severity":1,"message":"195","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":19},{"ruleId":"184","severity":1,"message":"196","line":1,"column":21,"nodeType":"186","messageId":"187","endLine":1,"endColumn":29},{"ruleId":"184","severity":1,"message":"197","line":3,"column":8,"nodeType":"186","messageId":"187","endLine":3,"endColumn":10},{"ruleId":"198","severity":1,"message":"199","line":47,"column":7,"nodeType":"200","messageId":"201","endLine":47,"endColumn":39},{"ruleId":"184","severity":1,"message":"202","line":7,"column":8,"nodeType":"186","messageId":"187","endLine":7,"endColumn":26},{"ruleId":"184","severity":1,"message":"203","line":2,"column":17,"nodeType":"186","messageId":"187","endLine":2,"endColumn":23},{"ruleId":"184","severity":1,"message":"204","line":81,"column":9,"nodeType":"186","messageId":"187","endLine":81,"endColumn":21},{"ruleId":"184","severity":1,"message":"205","line":82,"column":9,"nodeType":"186","messageId":"187","endLine":82,"endColumn":13},{"ruleId":"184","severity":1,"message":"206","line":83,"column":9,"nodeType":"186","messageId":"187","endLine":83,"endColumn":17},{"ruleId":"184","severity":1,"message":"207","line":84,"column":9,"nodeType":"186","messageId":"187","endLine":84,"endColumn":12},{"ruleId":"184","severity":1,"message":"191","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":15},{"ruleId":"184","severity":1,"message":"203","line":1,"column":17,"nodeType":"186","messageId":"187","endLine":1,"endColumn":23},{"ruleId":"184","severity":1,"message":"191","line":13,"column":10,"nodeType":"186","messageId":"187","endLine":13,"endColumn":15},{"ruleId":"184","severity":1,"message":"203","line":13,"column":17,"nodeType":"186","messageId":"187","endLine":13,"endColumn":23},{"ruleId":"184","severity":1,"message":"208","line":14,"column":8,"nodeType":"186","messageId":"187","endLine":14,"endColumn":22},{"ruleId":"184","severity":1,"message":"209","line":3,"column":9,"nodeType":"186","messageId":"187","endLine":3,"endColumn":18},{"ruleId":"184","severity":1,"message":"210","line":41,"column":10,"nodeType":"186","messageId":"187","endLine":41,"endColumn":21},{"ruleId":"184","severity":1,"message":"211","line":41,"column":23,"nodeType":"186","messageId":"187","endLine":41,"endColumn":37},{"ruleId":"184","severity":1,"message":"195","line":1,"column":10,"nodeType":"186","messageId":"187","endLine":1,"endColumn":19},{"ruleId":"184","severity":1,"message":"196","line":1,"column":21,"nodeType":"186","messageId":"187","endLine":1,"endColumn":29},{"ruleId":"184","severity":1,"message":"195","line":1,"column":20,"nodeType":"186","messageId":"187","endLine":1,"endColumn":29},{"ruleId":"184","severity":1,"message":"212","line":6,"column":23,"nodeType":"186","messageId":"187","endLine":6,"endColumn":37},"no-new-object",["213"],"no-unused-vars","'StaticStatsBox' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'FormCheck' is defined but never used.","'Row' is defined but never used.","'Stack' is defined but never used.","'AbilityBox' is defined but never used.","'ManualDiceRoller' is defined but never used.","'Component' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'io' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'RollResultsSection' is defined but never used.","'Button' is defined but never used.","'callCheckAPI' is assigned a value but never used.","'name' is assigned a value but never used.","'rolltype' is assigned a value but never used.","'mod' is assigned a value but never used.","'DiceRollButton' is defined but never used.","'MapCanvas' is assigned a value but never used.","'currentturn' is assigned a value but never used.","'setCurrentTurn' is assigned a value but never used.","'setLogMessages' is assigned a value but never used.","no-object-constructor"]