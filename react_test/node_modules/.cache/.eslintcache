[{"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\index.js":"1","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\App.js":"2","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\reportWebVitals.js":"3","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DiceRollButton.js":"4","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillSection.js":"5","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillRow.js":"6","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilitySection.js":"7","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilityBox.js":"8","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SingleRollResult.js":"9","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\RollResultsSection.js":"10","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\HealthSection.js":"11","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterSheet.js":"12","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\StaticStatsBox.js":"13","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRoller.js":"14","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterInventoryArea.js":"15","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrowSection.js":"16","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrow.js":"17","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DefensesConditionsBox.js":"18","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MapSection.js":"19","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Map.js":"20","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderBox.js":"21","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderItem.js":"22","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chatbox.js":"23","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chat.js":"24","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ChatMessage.js":"25","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLog.js":"26","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLogMessage.js":"27","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterSheet.js":"28","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroup.js":"29","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroupForm.js":"30","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterCreator.js":"31","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ActionsMenu.js":"32","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRollButton.js":"33","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsMenu.js":"34","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsLevelSection.js":"35","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventoryMenu.js":"36","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventorySection.js":"37"},{"size":536,"mtime":1699034410573,"results":"38","hashOfConfig":"39"},{"size":4186,"mtime":1706850537500,"results":"40","hashOfConfig":"39"},{"size":362,"mtime":1699032879980,"results":"41","hashOfConfig":"39"},{"size":1985,"mtime":1706737917180,"results":"42","hashOfConfig":"39"},{"size":1001,"mtime":1706681453156,"results":"43","hashOfConfig":"39"},{"size":558,"mtime":1706676869133,"results":"44","hashOfConfig":"39"},{"size":1039,"mtime":1706325834419,"results":"45","hashOfConfig":"39"},{"size":510,"mtime":1706676828894,"results":"46","hashOfConfig":"39"},{"size":636,"mtime":1706545133699,"results":"47","hashOfConfig":"39"},{"size":1315,"mtime":1706686034644,"results":"48","hashOfConfig":"39"},{"size":3258,"mtime":1706541725975,"results":"49","hashOfConfig":"39"},{"size":2015,"mtime":1706850560959,"results":"50","hashOfConfig":"39"},{"size":1943,"mtime":1706676890812,"results":"51","hashOfConfig":"39"},{"size":6603,"mtime":1706686047531,"results":"52","hashOfConfig":"39"},{"size":953,"mtime":1706809347189,"results":"53","hashOfConfig":"39"},{"size":2755,"mtime":1706336087014,"results":"54","hashOfConfig":"39"},{"size":417,"mtime":1706676859428,"results":"55","hashOfConfig":"39"},{"size":985,"mtime":1706476159728,"results":"56","hashOfConfig":"39"},{"size":533,"mtime":1706842372652,"results":"57","hashOfConfig":"39"},{"size":156,"mtime":1706506468897,"results":"58","hashOfConfig":"39"},{"size":1927,"mtime":1706841111303,"results":"59","hashOfConfig":"39"},{"size":425,"mtime":1706840720991,"results":"60","hashOfConfig":"39"},{"size":531,"mtime":1706541685434,"results":"61","hashOfConfig":"39"},{"size":1917,"mtime":1706741714592,"results":"62","hashOfConfig":"39"},{"size":256,"mtime":1706506142499,"results":"63","hashOfConfig":"39"},{"size":1157,"mtime":1706505418986,"results":"64","hashOfConfig":"39"},{"size":313,"mtime":1706504862643,"results":"65","hashOfConfig":"39"},{"size":1102,"mtime":1706744833191,"results":"66","hashOfConfig":"39"},{"size":7103,"mtime":1706746612445,"results":"67","hashOfConfig":"39"},{"size":12818,"mtime":1706745973094,"results":"68","hashOfConfig":"39"},{"size":6349,"mtime":1706819296899,"results":"69","hashOfConfig":"39"},{"size":2514,"mtime":1706745866395,"results":"70","hashOfConfig":"39"},{"size":447,"mtime":1706677991517,"results":"71","hashOfConfig":"39"},{"size":3029,"mtime":1706818489134,"results":"72","hashOfConfig":"39"},{"size":3396,"mtime":1706744795923,"results":"73","hashOfConfig":"39"},{"size":3411,"mtime":1706839240051,"results":"74","hashOfConfig":"39"},{"size":2339,"mtime":1706843187930,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},"1dx4dds",{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"79"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"79"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"79"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"79"},{"filePath":"108","messages":"109","suppressedMessages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"79"},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"79"},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"79"},{"filePath":"123","messages":"124","suppressedMessages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"79"},{"filePath":"127","messages":"128","suppressedMessages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"79"},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"79"},{"filePath":"135","messages":"136","suppressedMessages":"137","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"79"},{"filePath":"148","messages":"149","suppressedMessages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","suppressedMessages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"79"},{"filePath":"158","messages":"159","suppressedMessages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"79"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"171","messages":"172","suppressedMessages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"79"},{"filePath":"175","messages":"176","suppressedMessages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"79"},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"182","messages":"183","suppressedMessages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"185","messages":"186","suppressedMessages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"79"},{"filePath":"189","messages":"190","suppressedMessages":"191","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"195","messages":"196","suppressedMessages":"197","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"198","usedDeprecatedRules":"79"},{"filePath":"199","messages":"200","suppressedMessages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","suppressedMessages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\index.js",[],[],["205"],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\App.js",["206","207","208"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\reportWebVitals.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DiceRollButton.js",["209"],[],"import React, {useState} from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n//import io from 'socket.io-client';\r\n//const socket = io.connect('http://localhost:4000');\r\n\r\n\r\nfunction DiceRollButton ({name, rolltype, die, num, mod, setRollResults, text}) {\r\n  const [rolldata, setRollData] = useState({\r\n      rolls: [],\r\n      rollstring: \"\",\r\n      rolltotal: \"\",\r\n      basestring: \"\",\r\n      name: \"\",\r\n      rolltype: \"\",\r\n    });\r\n\r\n  /*\r\n  const rollDice = () => {\r\n    socket.emit('rolldice', this.state.data);\r\n  }\r\n  */ \r\n  const modPos = (modval, space) => {\r\n    let modifier = modval;\r\n    if (space === true) {\r\n      modifier = ` ${modifier}`;\r\n    }\r\n    if (modifier > 0) {\r\n      return `+${modifier}`;\r\n    } else if (modifier < 0) {\r\n      return `-${modifier}`;\r\n    } else {\r\n      return `${modifier}`;\r\n    }\r\n  }\r\n\r\n\r\n  const handleText = () => {\r\n    //if (text === \"\"){\r\n      if (die === 0 && num === 0) {\r\n        return modPos(mod);\r\n        /*\r\n        if (mod > 0) {\r\n          return `+${mod}`;\r\n        } else if (mod < 0) {\r\n          return `-${mod}`;\r\n        } else {\r\n          return `${mod}`;\r\n        }\r\n        */\r\n      } else if (die !== 0 && num !== 0 && mod === 0) {\r\n        return `${num}d${die}`;\r\n      } else if (die !== 0 && num !== 0 && mod !== 0) {\r\n        return `${num}d${die} ${modPos(mod, true)}`;\r\n      } else {\r\n        return \"\";\r\n      }\r\n    //}\r\n  }\r\n\r\n  const callCheckAPI = () => {\r\n    fetch(`http://localhost:9000/rollcheck?checkmode=single&name=${name}&rolltype=${rolltype}&die=${die}&num=${num}&mod=${mod}`)\r\n        .then(res => res.json())\r\n        .then(res => setRollData(res))\r\n        .then(setRollResults(rolldata))\r\n        .then(console.log(rolldata));\r\n  }\r\n  \r\n    //console.log(`rollstring = ${this.state.checkResponse.rollstring}`)\r\n  return (\r\n    <>\r\n      <Button variant='secondary' size='sm' onClick={callCheckAPI}>{text}</Button>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default DiceRollButton;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillSection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SkillRow.js",["210"],[],"import React, { Component } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\nfunction SkillRow ({name, mod, prof, bonus, setRollResults}) {\r\n\r\n  return (\r\n  <tr>\r\n    <td><input type=\"checkbox\" readOnly={true} checked={prof}></input></td>\r\n    <td className=\"skillMod\">{mod}</td>\r\n    <td className=\"skillName\">{name}</td>\r\n    <td className=\"skillBonus\">\r\n      <DiceRollButton name={name} rolltype=\"Skill\" die=\"20\" num=\"1\" mod={bonus} text={bonus} setRollResults={setRollResults}/>\r\n    </td>\r\n  </tr>\r\n  );\r\n\r\n}\r\n\r\nexport default SkillRow;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilitySection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\AbilityBox.js",["211"],[],"import React, { Component } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\nfunction AbilityBox ({name, abbrev, bonus, score, setRollResults}) {\r\n  return (\r\n    <div className=\"abilityBox\">\r\n      <div className=\"abilityLabel\">{abbrev}</div>\r\n      <DiceRollButton name={name} rolltype=\"Ability\" die=\"20\" num=\"1\" mod={bonus} text={bonus} setRollResults={setRollResults}/>\r\n      <div className=\"oval\">\r\n        <h4>{score}</h4>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AbilityBox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SingleRollResult.js",["212"],[],"import React, { useEffect } from \"react\";\r\n\r\nfunction SingleRollResult ({rollresults}) {\r\n\r\n  return (\r\n    <div className=\"rollResults frontElement\" id=\"rollResult1\">\r\n      <div className=\"rollDescription\" id=\"rollDescription1\">{rollresults.rollresults.name} - {rollresults.rollresults.rolltype}</div>\r\n      <div className=\"rollParts\" id=\"rollParts1\">{rollresults.rollresults.rollstring}</div>\r\n      <div className=\"rollBase\" id=\"rollBase1\">{rollresults.rollresults.basestring}</div>\r\n      <div className=\"rollTotal\" id=\"rollTotal1\">{rollresults.rollresults.rolltotal}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SingleRollResult;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\RollResultsSection.js",["213","214"],[],"import { useEffect, useState } from 'react';\r\nimport SingleRollResult from './SingleRollResult';\r\nimport io from 'socket.io-client';\r\n\r\n\r\nexport default function RollResultsSection (rollresults) {\r\n  /*\r\n  const [rolllist, setRollList] = useState([\r\n    {\r\n      rolls: [ 8 ],\r\n      rollstring: '8+2',\r\n      rolltotal: 10,\r\n      basestring: '1d20+2',\r\n      name: 'Constitution',\r\n      rolltype: 'Ability'\r\n    },\r\n    {\r\n      rolls: [ 8 ],\r\n      rollstring: '8+2',\r\n      rolltotal: 10,\r\n      basestring: '1d20+2',\r\n      name: 'Constitution',\r\n      rolltype: 'Ability'\r\n    }\r\n  ]);\r\n  \r\n  const [beans, setBeans] = useState('Beans brother');\r\n  const socket = io.connect('http://localhost:4000');\r\n  */\r\n\r\n  /*useEffect(() => {\r\n    socket.on('rolldiceresult', (data) => {\r\n      \r\n      setRollList(...rolllist, data);\r\n      console.log(`Rolllist:  ${rolllist}`);\r\n      \r\n      setBeans('b');\r\n  })});\r\n  */\r\n//{rolllist.map((roll) => <SingleRollResult name={roll.name} rolltype={roll.rolltype} rollstring={roll.rollstring} basestring={roll.basestring} rolltotal={roll.rolltotal}/>)}\r\n\r\nuseEffect(() => {\r\n  console.log(\"Testing user\");\r\n}, [rollresults]\r\n)\r\n\r\n  return (\r\n      <div id=\"rollContainer\">\r\n        <SingleRollResult rollresults={rollresults}></SingleRollResult>\r\n      </div> \r\n  )\r\n}\r\n","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\HealthSection.js",["215"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\n\r\nfunction HealthSection () {\r\n  const [healthval, setHealthVal] = useState({\r\n    currenthealth: 11,\r\n    maxhealth: 22\r\n  })\r\n\r\n  const [healthmod, setHealthMod] = useState(0);\r\n\r\n  useEffect(() => {  \r\n      getHealth();\r\n    }, []\r\n  ); \r\n\r\n  useEffect(() => {\r\n      setHealth();\r\n    }, [healthval.currenthealth]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log(`healthmod ${healthmod}`); \r\n    }, [healthmod]\r\n  );\r\n\r\n  const handleChange = (e) => {\r\n    console.log(`healthmod ${healthmod}`);\r\n    setHealthMod(e.target.value);\r\n    console.log(`healthmod ${healthmod}`);\r\n  }\r\n\r\n  const updateHealth = (option) => {\r\n    /*let newhealthobj = {\r\n      currenthealth: healthval.currenthealth,\r\n      maxhealth: healthval.maxhealth\r\n    }*/\r\n    let currenthealth = Number(healthval.currenthealth);\r\n    let newhealth = 0;\r\n    if (option === 'heal') {\r\n      newhealth = Number(currenthealth) + Number(healthmod);\r\n      console.log(`${newhealth} = ${currenthealth} + ${healthmod}`)\r\n    } else if (option === 'damage') {\r\n      console.log(`${newhealth} = ${currenthealth} - ${healthmod}`)\r\n      newhealth = Number(currenthealth) - Number(healthmod);\r\n    } else {\r\n      throw \"Shit's fucked brothers!\";\r\n    }\r\n    //newhealthobj.currenthealth = newhealth;\r\n    setHealthVal({...healthval, currenthealth: newhealth});\r\n    console.log(\"Current Health: \" + currenthealth + \"  HealthMod: \" + healthmod + \" NewHealth: \" + newhealth);\r\n    //addLogEntry(`Health: ${currenthealth} -> ${newhealth}`);\r\n    //document.getElementById(\"currentHealth\").value = newhealth;\r\n  }\r\n\r\n  const getHealth = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=health`)\r\n    .then(res => res.json())\r\n    .then(res => setHealthVal(res));\r\n  }\r\n\r\n  const setHealth = () => {\r\n    console.log('sethealth');\r\n    //fetch(`http://localhost:9000/sendcharacterinfo?infotype=health&currenthealth=${healthval.currenthealth}`);\r\n  }\r\n\r\n  return ( \r\n    <div className=\"healthSection frontElement\">\r\n      <Stack className=\"leftHealthSection\" direction=\"vertical\" gap={2}>\r\n        <Button variant='secondary' size='sm' onClick={() => updateHealth('heal')} >Heal</Button>\r\n        <input type='number' size=\"4\" onChange={(e) => handleChange(e)}></input>\r\n        <Button variant='secondary' size='sm' onClick={() => updateHealth('damage')} >Damage</Button>\r\n      </Stack>\r\n      <div className=\"rightHealthSection\">\r\n        <span className='characterSheetSectionTitle'>Hit Points</span>\r\n        <Stack direction=\"horizontal\" gap={1}>\r\n          <div className=\"healthBox\">\r\n            <label htmlFor=\"currenthealth\">Current</label>\r\n            <input name=\"currenthealth\" type=\"number\" size=\"4\" value={healthval.currenthealth} onChange={(e) => setHealthVal({...healthval, currenthealth: e.target.value})}></input>\r\n          </div>\r\n          <div className=\"healthBox\">\r\n            <label htmlFor=\"maxhealth\">Max</label>\r\n            <input name=\"maxhealth\" type=\"number\" size=\"4\" readOnly={true} value={healthval.maxhealth}></input>\r\n          </div>\r\n        </Stack>\r\n      </div>\r\n      \r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default HealthSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterSheet.js",["216"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\StaticStatsBox.js",["217"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton';\r\n\r\nfunction StaticStatsBox (setRollResults, rollresults) { \r\n  const [staticstats, setStaticStats] = useState({\r\n      profbonus: 2,\r\n      speed: 30,\r\n      initiative: 2,\r\n      armorclass: 14,\r\n      perception: 5,\r\n      investigation: 5,\r\n      insight: 5,\r\n      armor: \"Light, Medium, Shields\",\r\n      weapons: \"Martial, Simple\",\r\n      tools: \"Cobbler's, Land Vehicles\",\r\n      languages: \"Common, Halfling\",\r\n    });\r\n\r\n  useEffect(() => {  \r\n      getStats();\r\n    }, []\r\n  )\r\n\r\n\r\n  const getStats = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=staticstats`)\r\n    .then(res => res.json())\r\n    .then(res => setStaticStats(res));\r\n  }\r\n\r\n  return ( \r\n    <div className=\"staticStatsBox frontElement\">\r\n      <Stack className=\"statsContainer senses\" gap={1}>\r\n        <div>Perception - {staticstats.perception}</div>\r\n        <div>Investigation - {staticstats.investigation}</div>\r\n        <div>Insight - {staticstats.insight}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer generalStats\" gap={1}>\r\n        <div>Proficiency Bonus - {staticstats.profbonus}</div>\r\n        <div>Speed - {staticstats.speed}</div>\r\n        <div>Initiative - <DiceRollButton name=\"Initiative\" rolltype=\"Stat\" die=\"20\" num=\"1\" mod={staticstats.initiative} text={staticstats.initiative} setRollResults={setRollResults}>{staticstats.initiative}</DiceRollButton></div>\r\n        <div>Armor Class - {staticstats.armorclass}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer proficiencies\">\r\n        <div>Armor - {staticstats.armor}</div>\r\n        <div>Weapons - {staticstats.weapons}</div>\r\n        <div>Tools - {staticstats.tools}</div>\r\n        <div>Languages - {staticstats.languages}</div>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StaticStatsBox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRoller.js",["218","219"],[],"import React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport ManualDiceRollButton from './ManualDiceRollButton';\r\n\r\nfunction ManualDiceRoller ({setRollResults}) {\r\n  const [oldbuttonvals, setOldButtonVals] = useState({\r\n    d20: 0,\r\n    d12: 0,\r\n    d10: 0,\r\n    d8: 0,\r\n    d6: 0,\r\n    d4: 0,\r\n  })\r\n\r\n  const [buttonvals, setButtonVals] = useState([\r\n    {\r\n      die: 20,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 12,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 10,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 8,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 6,\r\n      val: 0,\r\n    },\r\n    {\r\n      die: 4,\r\n      val: 0,\r\n    },\r\n  ])\r\n\r\n\r\n/*\r\n  useEffect(() => {  \r\n      getHealth();\r\n    }, []\r\n  )  \r\n  \r\n  useEffect(() => {\r\n      setHealth();\r\n    }, [healthval.currenthealth]\r\n  )\r\n  */\r\n  useEffect(() => {\r\n    console.log(\"buttonvals\");\r\n    console.log(buttonvals); \r\n    }, [buttonvals]\r\n  )\r\n  \r\n  /*\r\n  const handleChange = (e) => {\r\n    setButtonVals({...buttonvals, e.target.type: e.target.value});\r\n  }\r\n  */\r\n\r\n  const resetButtons = () => {\r\n    /*\r\n    setButtonVals({\r\n      d20: 0,\r\n      d12: 0,\r\n      d10: 0,\r\n      d8: 0,\r\n      d6: 0,\r\n      d4: 0,\r\n    })*/\r\n    setButtonVals([\r\n      {\r\n        die: 20,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 12,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 10,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 8,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 6,\r\n        val: 0,\r\n      },\r\n      {\r\n        die: 4,\r\n        val: 0,\r\n      },\r\n    ]);\r\n  }\r\n\r\n  // This whole function is disgusting\r\n  const updateButtons = (die, val, sign) => {\r\n    /*\r\n    let buttonvalue = buttonvals[`${die}`] ?? 0; \r\n    if (sign === 'plus') {\r\n      buttonvalue++;\r\n    } else if (sign === 'minus' && buttonvalue > 0) {\r\n      buttonvalue--;\r\n    }\r\n    */\r\n    let newval = val;\r\n    // This handles adding or subtracting incrementally\r\n    if (sign === 'plus') {\r\n      newval++;\r\n    } else if (sign === 'minus' && newval > 0) {\r\n      newval--;\r\n    }\r\n    // This creates a new array of all of the buttons that aren't the button we pushed\r\n    let temparray = buttonvals.filter((buttonval) => buttonval.die !== die);\r\n    console.log(temparray);\r\n    // This adds back in the new value of the button that we pushed\r\n    temparray = [...temparray, {die: die, val: newval}];\r\n    // We need to sort the array because the previous line breaks the order, and we need the correct order so that things render right\r\n    temparray.sort((a, b) => b.die - a.die);\r\n    setButtonVals(temparray);\r\n    /*\r\n    switch (die) {\r\n      case 'd20':\r\n        setButtonVals({...buttonvals, d20:buttonvalue});\r\n        break;\r\n      case 'd12':\r\n        setButtonVals({...buttonvals, d12:buttonvalue});\r\n        break;\r\n      case 'd10':\r\n        setButtonVals({...buttonvals, d10:buttonvalue});\r\n        break;\r\n      case 'd8':\r\n        setButtonVals({...buttonvals, d8:buttonvalue});\r\n        break;\r\n      case 'd6':\r\n        setButtonVals({...buttonvals, d6:buttonvalue});\r\n        break;\r\n      case 'd4':\r\n        setButtonVals({...buttonvals, d4:buttonvalue});\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    */\r\n    //addLogEntry(`Health: ${currenthealth} -> ${newhealth}`);\r\n    //document.getElementById(\"currentHealth\").value = newhealth;\r\n  }\r\n\r\n  const manualRoll = () => {\r\n    let name = 'Manual';\r\n    let rolltype = \"Manual\";\r\n    console.log(\"buttonvals\");\r\n    let buttonvalssend = JSON.stringify(buttonvals);\r\n    //fetch(`http://localhost:9000/rollcheck?checkmode=multi&name=${name}&rolltype=${rolltype}&mod=0&d20num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 20)].val}&d12num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 12)].val}&d10num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 10)].val}&d8num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 8)].val}&d6num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 6)].val}&d4num=${buttonvals[buttonvals.findIndex((buttonval) => buttonval.die === 4)].val}`)\r\n      fetch(`http://localhost:9000/rollcheck?checkmode=multi&name=${name}&rolltype=${rolltype}&mod=0&rollstodo=${buttonvalssend}`)\r\n        .then(res => res.json())\r\n        .then(res => setRollResults(res));\r\n  }\r\n\r\n  return ( \r\n    <div className=\"manualDiceRollSection frontElement\">\r\n      <Stack className=\"charManualDiceRollButtons\" direction=\"vertical\" gap={1}>\r\n        {buttonvals.map((buttonval) => <ManualDiceRollButton key={buttonval.die} die={buttonval.die} value={buttonval.val} updateFunction={updateButtons}></ManualDiceRollButton>)}\r\n      </Stack>\r\n      <Stack className=\"rightHealthSection\" direction=\"vertical\" gap={1}>\r\n        <Button variant='secondary' size='sm' onClick={() => manualRoll()}>Roll</Button>\r\n        <Button variant='secondary' size='sm' onClick={() => resetButtons()}>Reset</Button>\r\n      </Stack>\r\n    </div>\r\n      \r\n  );\r\n}\r\n\r\nexport default ManualDiceRoller;\r\n\r\n/*\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d20', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d20', 'minus')}}>\r\n  <span>d20</span>\r\n  <span>{buttonvals.d20}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d12', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d12', 'minus')}}>\r\n  <span>d12</span>\r\n  <span>{buttonvals.d12}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d10', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d10', 'minus')}}>\r\n  <span>d10</span>\r\n  <span>{buttonvals.d10}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d8', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d8', 'minus')}}>\r\n  <span>d8</span>\r\n  <span>{buttonvals.d8}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d6', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d6', 'minus')}}>\r\n  <span>d6</span>\r\n  <span>{buttonvals.d6}</span>\r\n</Button>\r\n<Button className=\"manualDiceRollButton\" variant='secondary' size='sm' onClick={(e) => updateButtons('d4', 'plus')} onContextMenu={(e) => {e.preventDefault(); updateButtons('d4', 'minus')}}>\r\n  <span>d4</span>\r\n  <span>{buttonvals.d4}</span>\r\n</Button>\r\n\r\n*/","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterInventoryArea.js",["220","221"],[],"import { Stack, Button, Tab, Tabs } from 'react-bootstrap';\r\nimport ActionsMenu from './ActionsMenu';\r\nimport SpellsMenu from './SpellsMenu';\r\nimport InventoryMenu from './InventoryMenu';\r\n\r\nfunction CharacterInventoryArea({setRollResults}) {\r\n  return ( \r\n    <div className=\"characterInventoryArea frontElement\">\r\n      <Tabs defaultActiveKey='actions'>\r\n        <Tab eventKey='actions' title=\"Actions\">  \r\n          <ActionsMenu setRollResults={setRollResults}></ActionsMenu>\r\n        </Tab>\r\n        <Tab eventKey='spells' title=\"Spells\">\r\n          <SpellsMenu></SpellsMenu>\r\n        </Tab>\r\n        <Tab eventKey='inventory' title=\"Inventory\">\r\n          <InventoryMenu></InventoryMenu>\r\n        </Tab>\r\n        <Tab eventKey='features' title=\"Features\">\r\n          Features\r\n        </Tab>\r\n        <Tab eventKey='notes' title=\"Notes\">\r\n          Notes\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CharacterInventoryArea;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrowSection.js",["222","223","224"],[],"/*\r\n  return ( \r\n    <div className=\"characterSavingThrowSection frontElement\">\r\n      <Stack className=\"characterSavingThrowLeft\" direction=\"vertical\" gap={1}>\r\n        <div className=\"characterSavingThrow\"></div>\r\n      </Stack>\r\n    </div>\r\n  );\r\n}\r\n*/\r\n\r\nimport React, { useEffect, useState } from 'react';\r\nimport { Stack, Button } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton'\r\nimport SavingThrow from './SavingThrow';\r\n\r\nfunction SavingThrowSection ({setRollResults}) { \r\n  const [savingthrows, setSavingThrows] = useState([\r\n    {\r\n      name: 'STR',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'DEX',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'CON',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'INT',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'WIS',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    {\r\n      name: 'CHA',\r\n      prof: false,\r\n      val: +5,\r\n    },\r\n    ]);\r\n\r\n  useEffect(() => {  \r\n      getStats();\r\n    }, []\r\n  )\r\n\r\n\r\n  const getStats = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=savingthrow`)\r\n    .then(res => res.json())\r\n    .then(res => setSavingThrows(res));\r\n  }\r\n\r\n  return (\r\n    /* \r\n    <div className=\"staticStatsBox frontElement\">\r\n      <Stack className=\"statsContainer senses\" gap={1}>\r\n        <div>Perception - {staticstats.perception}</div>\r\n        <div>Investigation - {staticstats.investigation}</div>\r\n        <div>Insight - {staticstats.insight}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer generalStats\" gap={1}>\r\n        <div>Proficiency Bonus - {staticstats.profbonus}</div>\r\n        <div>Speed - {staticstats.speed}</div>\r\n        <div>Initiative - <DiceRollButton name=\"Initiative\" rolltype=\"Stat\" die=\"20\" num=\"1\" mod={staticstats.initiative} setRollResults={setRollResults}>{staticstats.initiative}</DiceRollButton></div>\r\n        <div>Armor Class - {staticstats.armorclass}</div>\r\n      </Stack>\r\n      <Stack className=\"statsContainer proficiencies\">\r\n        <div>Armor - {staticstats.armor}</div>\r\n        <div>Weapons - {staticstats.weapons}</div>\r\n        <div>Tools - {staticstats.tools}</div>\r\n        <div>Languages - {staticstats.languages}</div>\r\n      </Stack>\r\n    </div>\r\n    */\r\n    <div className=\"characterSavingThrowSectionBox frontElement\">\r\n      <span className='characterSheetSectionTitle'>Saving Throws</span>\r\n      <div className=\"characterSavingThrowSection\">\r\n        {savingthrows.map((savingthrow) => <SavingThrow key={savingthrow.name} name={savingthrow.name} prof={savingthrow.prof} val={savingthrow.val} setRollResults={setRollResults}/>)}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SavingThrowSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SavingThrow.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\DefensesConditionsBox.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MapSection.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Map.js",["225"],[],"function Map() {\r\n\r\n  const MapCanvas = props => <canvas {...props}/>\r\n\r\n  return ( \r\n    <div>\r\n      MapCanvas\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderBox.js",["226","227","228"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\TurnOrderItem.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chatbox.js",["229","230"],[],"import { useEffect, useState } from 'react';\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\nimport Chat from './Chat';\r\nimport GameLog from './GameLog';\r\n\r\nfunction Chatbox() {\r\n\r\n  return ( \r\n    <div className=\"chatBox frontElement\">\r\n      <Tabs defaultActiveKey=\"chat\" className=\"chatTabs\">\r\n        <Tab eventKey=\"chat\" title=\"Chat\">\r\n          <Chat></Chat>\r\n        </Tab>\r\n        <Tab eventKey=\"log\" title=\"Log\">\r\n          <GameLog></GameLog>\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbox;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\Chat.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ChatMessage.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLog.js",["231","232"],[],"import { useState, useEffect } from 'react';\r\nimport GameLogMessage from './GameLogMessage';\r\n\r\nfunction GameLog() {\r\n\r\n  const [logmessages, setLogMessages] = useState([\r\n    {\r\n      id: 0,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n    {\r\n      id: 1,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n    {\r\n      id: 2,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n    {\r\n      id: 3,\r\n      character: \"Jerome\",\r\n      type: \"Attack Roll\",\r\n      text: \"This is an attack roll\",\r\n    },\r\n  ]);\r\n\r\n  /*\r\n  useEffect(() => {  \r\n    getLog();\r\n    }, []\r\n  );\r\n\r\n\r\n  const getLog = () => {\r\n    fetch(`http://localhost:9000/getcharacterinfo?infotype=log`)\r\n    .then(res => res.json())\r\n    .then(res => setLogMessages(res));\r\n  }\r\n  */\r\n  return ( \r\n    <div className=\"gameLogInnerBox\">\r\n      {logmessages.map((message) => <GameLogMessage key={message.id} character={message.character} type={message.type} text={message.text}/>)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameLog;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\GameLogMessage.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterSheet.js",["233","234"],[],"import { useEffect, useState } from 'react';\r\nimport MonsterGroup from \"./MonsterGroup\";\r\nimport MonsterGroupForm from \"./MonsterGroupForm\";\r\n\r\n\r\nfunction MonsterSheet() {\r\n\r\n  const [monstergroups, setMonsterGroups] = useState([\r\n    {\r\n      id: 0,\r\n      name: \"Goblin\",\r\n      quantity: 2,\r\n\r\n    },\r\n  ]);\r\n\r\n  return ( \r\n    <div className=\"monsterSheet\">\r\n      <div className=\"monsterSheetTopBar frontElement\">\r\n        <div className=\"encounterSelectorSection\">\r\n          <label htmlFor=\"encounterSelector\">Encounter</label>\r\n          <select className=\"encounterSelector\" name=\"encounterSelector\">\r\n            <option value=\"cragmaw\">Cragmaw</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"monsterSheetManualRollSection\">\r\n          Manual Dice Roll Buttons\r\n        </div>\r\n      </div>\r\n      <div className=\"monsterGroupDisplaySection\">\r\n        {monstergroups.map((monstergroup) => <MonsterGroup key={monstergroup.id} monsterinfo={monstergroup}/>)}\r\n        <MonsterGroupForm></MonsterGroupForm>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MonsterSheet;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroup.js",["235"],[],"import { Button, Table } from 'react-bootstrap';\r\n\r\nfunction MonsterGroup({monstergroup}) {\r\n\r\n  const removeMonsterGroup = () => {\r\n    console.log(\"This will remove the monster group\");\r\n  }\r\n\r\n  return ( \r\n    <div className=\"monsterGroupDisplay frontElement\">\r\n      <div className=\"monsterGroupDisplayBasicInfo\">\r\n        <Table size=\"sm\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Creature</th>\r\n              <td><span name=\"creature\">Goblin</span></td>\r\n              <td><span name=\"quantity\">2</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Description</th>\r\n              <td colSpan=\"2\"><span name=\"description\">Cragmaw</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>HD/CR</th>\r\n              <td><span name=\"hitdicenum\">2</span>d<span name=\"hitdicetype\">6</span></td>\r\n              <td><span name=\"challengerating\">0.25</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Size/Type</th>\r\n              <td><span name=\"size\">Small</span></td>\r\n              <td><span name=\"type\">Monster</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Alignment</th>\r\n              <td colSpan=\"2\"><span name=\"alignment\">Neutral Evil</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>XP Per/Total</th>\r\n              <td><span name=\"xpper\">50</span></td>\r\n              <td><span name=\"xptotal\">100</span></td>\r\n            </tr>\r\n            <tr>\r\n              <th>AC/Speed</th>\r\n              <td><span name=\"ac\">13</span></td>\r\n              <td><span name=\"speed\">50</span></td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"3\"><button className=\"monsterRemoveFromEncounterButton\" onClick={removeMonsterGroup()}>Remove From Encounter</button></td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className='monsterGroupDisplayAbilities'>\r\n        <Table size=\"sm\">\r\n          <tbody>\r\n            <tr>\r\n              <th>Init</th>\r\n              <td colSpan=\"2\">\r\n                <button className=\"monsterSheetInitButton\" name=\"Initiative\">+2</button>\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <th>Str</th>\r\n              <td><span name=\"abilitystr\">8</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Strength\">-1</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Dex</th>\r\n              <td><span name=\"abilitydex\">14</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Dexterity\">+2</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Con</th>\r\n              <td><span name=\"abilitycon\">10</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Constitution\">0</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Int</th>\r\n              <td><span name=\"abilityint\">10</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Intelligence\">0</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Wis</th>\r\n              <td><span name=\"abilitywis\">8</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Wisdom\">-1</button></td>\r\n            </tr>\r\n            <tr>\r\n              <th>Cha</th>\r\n              <td><span name=\"abilitycha\">8</span></td>\r\n              <td><button className=\"monsterSheetAbilityButton\" name=\"Charisma\">-1</button></td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"monsterGroupDisplayAttacks\">\r\n        <Table size='sm'>\r\n          <thead>\r\n            <tr>\r\n              <th>Attack</th>\r\n              <th>Hit+</th>\r\n              <th>Damage</th>\r\n              <th>Type</th>\r\n              <th>HP</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <td><span name=\"attack1name\">Scimitar</span></td>\r\n              <td><span name=\"attack1hit\">4</span></td>\r\n              <td><span name=\"attack1numdice\">1</span>d<span name=\"attack1dice\">6</span><span name=\"attack1bonus\">+4</span></td>\r\n              <td><span name=\"damagetype1\">Slashing</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput1\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"0\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td><span name=\"attack2name\">Shortbow</span></td>\r\n              <td><span name=\"attack2hit\">4</span></td>\r\n              <td><span name=\"attack2numdice\">1</span>d<span name=\"attack2dice\">6</span><span name=\"attack2bonus\">+4</span></td>\r\n              <td><span name=\"damagetype2\">Piercing</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput2\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td><span name=\"attack3name\"></span></td>\r\n              <td><span name=\"attack3hit\"></span></td>\r\n              <td><span name=\"attack3numdice\"></span>d<span name=\"attack3dice\"></span><span name=\"attack3bonus\"></span></td>\r\n              <td><span name=\"damagetype3\"></span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput3\" className=\"monsterHealthInput\" type=\"number\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td><span name=\"attack4name\"></span></td>\r\n              <td><span name=\"attack4hit\"></span></td>\r\n              <td><span name=\"attack4numdice\"></span>d<span name=\"attack4dice\"></span><span name=\"attack4bonus\"></span></td>\r\n              <td><span name=\"damagetype4\"></span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput4\" className=\"monsterHealthInput\" type=\"number\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"4\" rowSpan=\"2\"><span name=\"skills\">Stealth +6; Darkvision 60'</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput5\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput6\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan=\"4\" rowSpan=\"2\"><span name=\"ability\">Nimble Escape (Disengage or Hide as Bonus Action)</span></td>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput7\" className=\"monsterHealthInput\" type=\"number\" defaultValue=\"\"/></td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"monsterHealth\"><input name=\"monsterhealthinput8\" className=\"monsterHealthInput\" type=\"text\" defaultValue=\"\"/></td>\r\n            </tr>\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"monsterGroupNotesSection\">\r\n        <div className=\"monsterGroupNotes\"></div>\r\n          <label htmlFor=\"monsterGroupNotesText\">Notes</label>\r\n          <textarea name=\"monsterGroupNotesText\"></textarea>\r\n      </div>\r\n    </div>\r\n   );\r\n}\r\n\r\nexport default MonsterGroup;\r\n\r\n","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\MonsterGroupForm.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\CharacterCreator.js",["236","237","238","239"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ActionsMenu.js",["240"],[],"import { Table } from \"react-bootstrap\";\r\nimport { useState, useEffect } from \"react\";\r\nimport DiceRollButton from \"./DiceRollButton\";\r\n\r\n\r\nfunction ActionsMenu({setRollResults}) {\r\n\r\n  \r\n  const [actions, setActions] = useState([\r\n    {\r\n      name: \"Mace\",\r\n      range: \"5 ft\",\r\n      hitdc: 5,\r\n      effectdie: 12,\r\n      effectdienum: 1,\r\n      effectbonus: 3,\r\n      notes: \"Simple\",\r\n    },\r\n    {\r\n      name: \"Dagger\",\r\n      range: \"20 (60)\",\r\n      hitdc: 6,\r\n      effectdie: 4,\r\n      effectdienum: 1,\r\n      effectbonus: 3,\r\n      notes: \"Simple, Light, Thrown\",\r\n    },\r\n    {\r\n      name: \"Unarmed Strike\",\r\n      range: \"5 ft\",\r\n      hitdc: 5,\r\n      effectdie: 0,\r\n      effectdienum: 0,\r\n      effectbonus: 4,\r\n      notes: \"\",\r\n    },\r\n  ]);\r\n\r\n\r\n  useEffect(() => {\r\n    getActions();\r\n  }, []\r\n  );\r\n\r\n  // Gets actions from the server\r\n  const getActions = () => {\r\n    console.log(\"Getting actions!\");\r\n  }\r\n\r\n  const modPos = (bonus) => {\r\n    if (bonus > 0) {\r\n      return `+ ${bonus}`;\r\n    } else if (bonus < 0) {\r\n      return `- ${bonus}`;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n\r\n  return ( \r\n    <div className=\"actionsMenu characterInventoryAreaSection\">\r\n      <div className=\"actionsSection\">\r\n        <span className=\"characterSheetSectionTitle\">Actions</span>\r\n        <Table size=\"sm\">\r\n          <thead>\r\n            <tr>\r\n              <th>Name</th>\r\n              <th>Range</th>\r\n              <th>Hit/DC</th>\r\n              <th>Effect</th>\r\n              <th>Notes</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {actions.map((action, index) => \r\n              <tr key={index}>\r\n                <td>{action.name}</td>\r\n                <td>{action.range}</td>\r\n                <td><DiceRollButton name={action.name} rolltype={\"Attack\"} die={20} num={1} mod={action.hitdc} setRollResults={setRollResults} text={action.hitdc}></DiceRollButton></td>\r\n                <td><DiceRollButton name={action.name} rolltype={\"Damage\"} die={action.effectdie} num={action.effectdienum} mod={action.effectbonus} setRollResults={setRollResults} text={`${action.effectdienum}d${action.effectdie} ${modPos(action.effectbonus)} `}></DiceRollButton></td>\r\n                <td>{action.notes}</td>\r\n              </tr>\r\n            )}\r\n          </tbody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"bonusActionsSection\">\r\n        <span className=\"characterSheet\">Actions</span>\r\n\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ActionsMenu;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\ManualDiceRollButton.js",[],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsMenu.js",["241","242","243","244","245","246","247"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\SpellsLevelSection.js",["248","249","250","251","252"],[],"import {useState, useEffect} from 'react';\r\nimport { Button, Table } from 'react-bootstrap';\r\nimport DiceRollButton from './DiceRollButton'; \r\n\r\nfunction SpellsLevelSection({level, numspellslots, savedc, spells, setRollResults}) {\r\n\r\n  const [spellslots, setSpellSlots] = useState([]);\r\n\r\n  const createSpellSlots = () => {\r\n    let slots = [];\r\n    console.log(`level - ${level}   numspellslots - ${numspellslots}`);\r\n    for (let i = 0; i < numspellslots; i++) {\r\n      console.log(\"spellslot\");\r\n      /*\r\n      let newspellslots = spellslots;\r\n      newspellslots.push(false);\r\n      setSpellSlots(newspellslots);\r\n      */\r\n      slots.push(false);\r\n      console.log(slots);\r\n    }\r\n    return slots;\r\n  }\r\n\r\n  useEffect(() => {\r\n    setSpellSlots(createSpellSlots());\r\n    return () => {\r\n      console.log('This should clear the array');\r\n    }\r\n  }, []\r\n  );\r\n\r\n\r\n  const modPos = (bonus) => {\r\n    if (bonus > 0) {\r\n      return `+ ${bonus}`;\r\n    } else if (bonus < 0) {\r\n      return `- ${bonus}`;\r\n    } else {\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  const titleHandler = (level) => {\r\n    switch (level) {\r\n      case 0:\r\n        return \"Cantrips\";\r\n        break;\r\n      case 1:\r\n        return \"1st Level\";\r\n        break;\r\n      case 2:\r\n        return \"2nd Level\";\r\n        break;\r\n      case 3:\r\n        return \"3rd Level\";\r\n        break;\r\n      default:\r\n        return `${level}th Level`\r\n    }\r\n  }\r\n\r\n\r\n  const hitDcHandler = (spell) => {\r\n    if (spell.hitdcroll === false) {\r\n      if (spell.hitdc !== \"\") {\r\n        return `${spell.hitdc} ${savedc}`;\r\n      }\r\n    }\r\n    return spell.hitdc; \r\n  }\r\n\r\n  const effectHandler = (spell) => {\r\n    let text = `${spell.effectdienum}d${spell.effectdie}${modPos(spell.effectdiemod)}`;\r\n    if (spell.effectdie === 0 || spell.effectdienum === 0) {\r\n      return spell.effect;\r\n    } else {\r\n      return <DiceRollButton name={spell.name} rolltype={spell.effect} die={spell.effectdie} num={spell.effectdienum} mod={spell.effectdiemod} setRollResults={setRollResults} text={text}></DiceRollButton>\r\n    }\r\n  }\r\n\r\n\r\n  return ( \r\n    <div className=\"spellsLevelSection\">\r\n      <div className=\"spellsLevelSectionHeader\">\r\n        <span className=\"characterSheetSectionTitle\">{titleHandler(level)}</span>\r\n        <div className=\"spellsHeaderRightSection\">\r\n          <Button size=\"sm\" variant='secondary'>Clear</Button>\r\n          <div className=\"spellHeaderSpellSlots\">\r\n            {spellslots.map((spellslot, index) => <input type=\"checkbox\" key={index} value={spellslot}></input>)}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Table size=\"sm\">\r\n        <thead>\r\n          <tr>\r\n            <td></td>\r\n            <th>Name</th>\r\n            <th>Time</th>\r\n            <th>Range</th>\r\n            <th>Hit/DC</th>\r\n            <th>Effect</th>\r\n            <th>Notes</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {spells.map((spell, index) => \r\n            <tr key={index}>\r\n              <td><Button size='sm'>Cast</Button></td>\r\n              <td>{spell.name}</td>\r\n              <td>{spell.timetocast}</td>\r\n              <td>{spell.range}</td>\r\n              <td>{hitDcHandler(spell)}</td>\r\n              <td>{effectHandler(spell)}</td>\r\n              <td>{spell.notes}</td>\r\n            </tr>\r\n          )}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SpellsLevelSection;","C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventoryMenu.js",["253"],[],"C:\\Users\\cosmi\\.projects\\questweaver_testing\\react_test\\src\\InventorySection.js",["254","255","256","257"],[],{"ruleId":"258","replacedBy":"259"},{"ruleId":"260","severity":1,"message":"261","line":6,"column":8,"nodeType":"262","messageId":"263","endLine":6,"endColumn":22},{"ruleId":"260","severity":1,"message":"264","line":13,"column":8,"nodeType":"262","messageId":"263","endLine":13,"endColumn":18},{"ruleId":"260","severity":1,"message":"265","line":14,"column":8,"nodeType":"262","messageId":"263","endLine":14,"endColumn":24},{"ruleId":"260","severity":1,"message":"266","line":38,"column":9,"nodeType":"262","messageId":"263","endLine":38,"endColumn":19},{"ruleId":"260","severity":1,"message":"267","line":1,"column":17,"nodeType":"262","messageId":"263","endLine":1,"endColumn":26},{"ruleId":"260","severity":1,"message":"267","line":1,"column":17,"nodeType":"262","messageId":"263","endLine":1,"endColumn":26},{"ruleId":"260","severity":1,"message":"268","line":1,"column":17,"nodeType":"262","messageId":"263","endLine":1,"endColumn":26},{"ruleId":"260","severity":1,"message":"269","line":1,"column":21,"nodeType":"262","messageId":"263","endLine":1,"endColumn":29},{"ruleId":"260","severity":1,"message":"270","line":3,"column":8,"nodeType":"262","messageId":"263","endLine":3,"endColumn":10},{"ruleId":"271","severity":1,"message":"272","line":47,"column":7,"nodeType":"273","messageId":"274","endLine":47,"endColumn":39},{"ruleId":"260","severity":1,"message":"275","line":7,"column":8,"nodeType":"262","messageId":"263","endLine":7,"endColumn":26},{"ruleId":"260","severity":1,"message":"276","line":2,"column":17,"nodeType":"262","messageId":"263","endLine":2,"endColumn":23},{"ruleId":"260","severity":1,"message":"277","line":6,"column":10,"nodeType":"262","messageId":"263","endLine":6,"endColumn":23},{"ruleId":"260","severity":1,"message":"278","line":6,"column":25,"nodeType":"262","messageId":"263","endLine":6,"endColumn":41},{"ruleId":"260","severity":1,"message":"279","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":15},{"ruleId":"260","severity":1,"message":"276","line":1,"column":17,"nodeType":"262","messageId":"263","endLine":1,"endColumn":23},{"ruleId":"260","severity":1,"message":"279","line":13,"column":10,"nodeType":"262","messageId":"263","endLine":13,"endColumn":15},{"ruleId":"260","severity":1,"message":"276","line":13,"column":17,"nodeType":"262","messageId":"263","endLine":13,"endColumn":23},{"ruleId":"260","severity":1,"message":"280","line":14,"column":8,"nodeType":"262","messageId":"263","endLine":14,"endColumn":22},{"ruleId":"260","severity":1,"message":"281","line":3,"column":9,"nodeType":"262","messageId":"263","endLine":3,"endColumn":18},{"ruleId":"260","severity":1,"message":"282","line":1,"column":31,"nodeType":"262","messageId":"263","endLine":1,"endColumn":42},{"ruleId":"260","severity":1,"message":"283","line":41,"column":10,"nodeType":"262","messageId":"263","endLine":41,"endColumn":21},{"ruleId":"260","severity":1,"message":"284","line":41,"column":23,"nodeType":"262","messageId":"263","endLine":41,"endColumn":37},{"ruleId":"260","severity":1,"message":"268","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":19},{"ruleId":"260","severity":1,"message":"269","line":1,"column":21,"nodeType":"262","messageId":"263","endLine":1,"endColumn":29},{"ruleId":"260","severity":1,"message":"268","line":1,"column":20,"nodeType":"262","messageId":"263","endLine":1,"endColumn":29},{"ruleId":"260","severity":1,"message":"285","line":6,"column":23,"nodeType":"262","messageId":"263","endLine":6,"endColumn":37},{"ruleId":"260","severity":1,"message":"268","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":19},{"ruleId":"260","severity":1,"message":"286","line":8,"column":25,"nodeType":"262","messageId":"263","endLine":8,"endColumn":41},{"ruleId":"260","severity":1,"message":"276","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":16},{"ruleId":"260","severity":1,"message":"264","line":3,"column":8,"nodeType":"262","messageId":"263","endLine":3,"endColumn":18},{"ruleId":"260","severity":1,"message":"287","line":4,"column":8,"nodeType":"262","messageId":"263","endLine":4,"endColumn":22},{"ruleId":"260","severity":1,"message":"288","line":8,"column":22,"nodeType":"262","messageId":"263","endLine":8,"endColumn":35},{"ruleId":"260","severity":1,"message":"289","line":12,"column":21,"nodeType":"262","messageId":"263","endLine":12,"endColumn":37},{"ruleId":"260","severity":1,"message":"290","line":9,"column":19,"nodeType":"262","messageId":"263","endLine":9,"endColumn":29},{"ruleId":"260","severity":1,"message":"276","line":1,"column":10,"nodeType":"262","messageId":"263","endLine":1,"endColumn":16},{"ruleId":"260","severity":1,"message":"291","line":1,"column":18,"nodeType":"262","messageId":"263","endLine":1,"endColumn":23},{"ruleId":"260","severity":1,"message":"280","line":3,"column":8,"nodeType":"262","messageId":"263","endLine":3,"endColumn":22},{"ruleId":"260","severity":1,"message":"292","line":11,"column":21,"nodeType":"262","messageId":"263","endLine":11,"endColumn":33},{"ruleId":"260","severity":1,"message":"293","line":22,"column":18,"nodeType":"262","messageId":"263","endLine":22,"endColumn":27},{"ruleId":"294","severity":1,"message":"295","line":92,"column":6,"nodeType":"296","endLine":92,"endColumn":8,"suggestions":"297"},{"ruleId":"260","severity":1,"message":"298","line":110,"column":9,"nodeType":"262","messageId":"263","endLine":110,"endColumn":19},{"ruleId":"294","severity":1,"message":"299","line":30,"column":6,"nodeType":"296","endLine":30,"endColumn":8,"suggestions":"300"},{"ruleId":"301","severity":1,"message":"302","line":48,"column":9,"nodeType":"303","messageId":"304","endLine":48,"endColumn":15},{"ruleId":"301","severity":1,"message":"302","line":51,"column":9,"nodeType":"303","messageId":"304","endLine":51,"endColumn":15},{"ruleId":"301","severity":1,"message":"302","line":54,"column":9,"nodeType":"303","messageId":"304","endLine":54,"endColumn":15},{"ruleId":"301","severity":1,"message":"302","line":57,"column":9,"nodeType":"303","messageId":"304","endLine":57,"endColumn":15},{"ruleId":"260","severity":1,"message":"305","line":40,"column":17,"nodeType":"262","messageId":"263","endLine":40,"endColumn":25},{"ruleId":"260","severity":1,"message":"306","line":3,"column":8,"nodeType":"262","messageId":"263","endLine":3,"endColumn":15},{"ruleId":"260","severity":1,"message":"307","line":3,"column":19,"nodeType":"262","messageId":"263","endLine":3,"endColumn":26},{"ruleId":"294","severity":1,"message":"308","line":11,"column":6,"nodeType":"296","endLine":11,"endColumn":13,"suggestions":"309"},{"ruleId":"260","severity":1,"message":"310","line":14,"column":9,"nodeType":"262","messageId":"263","endLine":14,"endColumn":18},"no-new-object",["311"],"no-unused-vars","'StaticStatsBox' is defined but never used.","Identifier","unusedVar","'AbilityBox' is defined but never used.","'ManualDiceRoller' is defined but never used.","'handleText' is assigned a value but never used.","'Component' is defined but never used.","'useEffect' is defined but never used.","'useState' is defined but never used.","'io' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'RollResultsSection' is defined but never used.","'Button' is defined but never used.","'oldbuttonvals' is assigned a value but never used.","'setOldButtonVals' is assigned a value but never used.","'Stack' is defined but never used.","'DiceRollButton' is defined but never used.","'MapCanvas' is assigned a value but never used.","'useCallback' is defined but never used.","'currentturn' is assigned a value but never used.","'setCurrentTurn' is assigned a value but never used.","'setLogMessages' is assigned a value but never used.","'setMonsterGroups' is assigned a value but never used.","'AbilitySection' is defined but never used.","'settempvalues' is assigned a value but never used.","'setAbilityScores' is assigned a value but never used.","'setActions' is assigned a value but never used.","'Table' is defined but never used.","'setSpellInfo' is assigned a value but never used.","'setSpells' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getLevels'. Either include it or remove the dependency array.","ArrayExpression",["312"],"'handleCast' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'createSpellSlots'. Either include it or remove the dependency array.",["313"],"no-unreachable","Unreachable code.","BreakStatement","unreachableCode","'setItems' is assigned a value but never used.","'Reorder' is defined but never used.","'reorder' is defined but never used.","React Hook useEffect has a missing dependency: 'calculateWeight'. Either include it or remove the dependency array.",["314"],"'onReorder' is assigned a value but never used.","no-object-constructor",{"desc":"315","fix":"316"},{"desc":"317","fix":"318"},{"desc":"319","fix":"320"},"Update the dependencies array to be: [getLevels]",{"range":"321","text":"322"},"Update the dependencies array to be: [createSpellSlots]",{"range":"323","text":"324"},"Update the dependencies array to be: [calculateWeight, items]",{"range":"325","text":"326"},[1934,1936],"[getLevels]",[859,861],"[createSpellSlots]",[347,354],"[calculateWeight, items]"]