{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cosmi\\\\.projects\\\\questweaver_testing\\\\react_test\\\\src\\\\DiceRollButton.js\";\nimport React, { Component } from \"react\";\nimport App from \"./App\";\nimport RollResultsSection from \"./RollResultsSection\";\nimport SingleRollResult from \"./SingleRollResult\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass DiceRollButton extends Component {\n  constructor(props) {\n    super(props);\n    this.callCheckAPI = this.callCheckAPI.bind(this);\n    this.state = {\n      checkResponse: {\n        rolls: [],\n        rollstring: \"\",\n        rolltotal: \"\",\n        basestring: \"\",\n        name: \"\",\n        rolltype: \"\"\n      }\n    };\n  }\n  callCheckAPI() {\n    fetch(`http://localhost:9000/rollcheck?name=${this.props.name}&rolltype=${this.props.rolltype}&die=${this.props.die}&num=${this.props.num}&mod=${this.props.mod}`).then(res => res.json()).then(res => this.setState({\n      checkResponse: res\n    }));\n    rollcontainer = document.getElementById('rollContainer');\n    rollcontainerlist = rollcontainer.querySelectorAll('.SingleRollResult');\n    if (rollcontainerlist.length < 4) {\n      newrollresult = /*#__PURE__*/_jsxDEV(SingleRollResult, {\n        rollstring: this.state.checkResponse.rollstring,\n        rolltotal: this.state.checkResponse.rolltotal,\n        name: this.state.checkResponse.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 23\n      }, this);\n      rollcontainer.appendChild(newrollresult);\n    } else {\n      // we need to cycle the roll results\n      let rollresult1 = rollresultcontainer.querySelector('#rollResult1');\n      let rollresult2 = rollresultcontainer.querySelector('#rollResult2');\n      let rollresult3 = rollresultcontainer.querySelector('#rollResult3');\n      let roll1info = rollresult1.innerHTML;\n      let roll2info = rollresult2.innerHTML;\n      rollresult2.innerHTML = roll1info;\n      rollresult3.innerHTML = roll2info;\n      newrollresult = document.getElementById('rollResult1');\n    }\n    //RollResultsSection.displayRollResults(this.state.checkResponse.name, this.state.checkResponse.rolltype, this.state.checkResponse.rollstring, this.state.checkResponse.rolltotal, this.state.checkResponse.basestring);\n  }\n\n  render() {\n    console.log(`rollstring = ${this.state.checkResponse.rollstring}`);\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: this.callCheckAPI,\n      children: this.props.mod\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }, this);\n  }\n}\n;\nexport const rollResults = () => {\n  return;\n};\nexport default DiceRollButton;","map":{"version":3,"names":["React","Component","App","RollResultsSection","SingleRollResult","jsxDEV","_jsxDEV","DiceRollButton","constructor","props","callCheckAPI","bind","state","checkResponse","rolls","rollstring","rolltotal","basestring","name","rolltype","fetch","die","num","mod","then","res","json","setState","rollcontainer","document","getElementById","rollcontainerlist","querySelectorAll","length","newrollresult","fileName","_jsxFileName","lineNumber","columnNumber","appendChild","rollresult1","rollresultcontainer","querySelector","rollresult2","rollresult3","roll1info","innerHTML","roll2info","render","console","log","onClick","children","rollResults"],"sources":["C:/Users/cosmi/.projects/questweaver_testing/react_test/src/DiceRollButton.js"],"sourcesContent":["import React, { Component } from \"react\";\r\nimport App from \"./App\";\r\nimport RollResultsSection from \"./RollResultsSection\";\r\nimport SingleRollResult from \"./SingleRollResult\";\r\n\r\nclass DiceRollButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.callCheckAPI = this.callCheckAPI.bind(this);\r\n    this.state = {\r\n      checkResponse: {\r\n        rolls: [],\r\n        rollstring: \"\",\r\n        rolltotal: \"\",\r\n        basestring: \"\",\r\n        name: \"\",\r\n        rolltype: \"\",\r\n      }\r\n    }\r\n  }\r\n\r\n  callCheckAPI() {\r\n    fetch(`http://localhost:9000/rollcheck?name=${this.props.name}&rolltype=${this.props.rolltype}&die=${this.props.die}&num=${this.props.num}&mod=${this.props.mod}`)\r\n        .then(res => res.json())\r\n        .then(res => this.setState({ checkResponse: res }));\r\n\r\n    rollcontainer = document.getElementById('rollContainer')\r\n    rollcontainerlist = rollcontainer.querySelectorAll('.SingleRollResult');\r\n    if (rollcontainerlist.length < 4) {\r\n      newrollresult = <SingleRollResult rollstring={this.state.checkResponse.rollstring} rolltotal={this.state.checkResponse.rolltotal} name={this.state.checkResponse.name}/>\r\n      rollcontainer.appendChild(newrollresult);\r\n  \r\n  \r\n    } else {\r\n      // we need to cycle the roll results\r\n      let rollresult1 = rollresultcontainer.querySelector('#rollResult1');\r\n      let rollresult2 = rollresultcontainer.querySelector('#rollResult2');\r\n      let rollresult3 = rollresultcontainer.querySelector('#rollResult3');\r\n  \r\n      let roll1info = rollresult1.innerHTML;\r\n      let roll2info = rollresult2.innerHTML;\r\n  \r\n      rollresult2.innerHTML = roll1info;\r\n      rollresult3.innerHTML = roll2info;\r\n  \r\n      newrollresult = document.getElementById('rollResult1');\r\n    }\r\n    //RollResultsSection.displayRollResults(this.state.checkResponse.name, this.state.checkResponse.rolltype, this.state.checkResponse.rollstring, this.state.checkResponse.rolltotal, this.state.checkResponse.basestring);\r\n  }\r\n  \r\n  render (){\r\n    console.log(`rollstring = ${this.state.checkResponse.rollstring}`)\r\n    return (\r\n    <button onClick={this.callCheckAPI}>{this.props.mod}</button>\r\n    );\r\n  }\r\n};\r\n\r\nexport const rollResults = () => {\r\n  return ; \r\n};\r\n\r\nexport default DiceRollButton;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}