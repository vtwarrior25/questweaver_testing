{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cosmi\\\\.projects\\\\questweaver_testing\\\\react_test\\\\src\\\\DiceRollButton.js\";\nimport React, { Component, createElement } from \"react\";\nimport App from \"./App\";\nimport RollResultsSection from \"./RollResultsSection\";\nimport SingleRollResult from \"./SingleRollResult\";\nimport Button from 'react-bootstrap/Button';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass DiceRollButton extends Component {\n  constructor(props) {\n    super(props);\n    this.callCheckAPI = this.callCheckAPI.bind(this);\n    this.state = {\n      checkResponse: {\n        rolls: [],\n        rollstring: \"\",\n        rolltotal: \"\",\n        basestring: \"\",\n        name: \"\",\n        rolltype: \"\"\n      }\n    };\n  }\n  rollDice() {}\n  callCheckAPI() {\n    fetch(`http://localhost:9000/rollcheck?name=${this.props.name}&rolltype=${this.props.rolltype}&die=${this.props.die}&num=${this.props.num}&mod=${this.props.mod}`).then(res => res.json()).then(res => this.setState({\n      checkResponse: res\n    }));\n    /*\r\n        let rollcontainer = document.getElementById('rollContainer')\r\n        let rollcontainerlist = rollcontainer.querySelectorAll('.SingleRollResult');\r\n        if (rollcontainerlist.length < 4) {\r\n          let newrollresult = createElement(SingleRollResult, {rollstring={this.state.checkResponse.rollstring} rolltotal={this.state.checkResponse.rolltotal} name={this.state.checkResponse.name}})\r\n          rollcontainer.appendChild(newrollresult);\r\n          }\r\n      */\n\n    //RollResultsSection.displayRollResults(this.state.checkResponse.name, this.state.checkResponse.rolltype, this.state.checkResponse.rollstring, this.state.checkResponse.rolltotal, this.state.checkResponse.basestring);\n  }\n\n  render() {\n    console.log(`rollstring = ${this.state.checkResponse.rollstring}`);\n    return /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"secondary\",\n      size: \"xl\",\n      onClick: this.callCheckAPI,\n      children: this.props.mod\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }, this);\n  }\n}\n;\nexport default DiceRollButton;","map":{"version":3,"names":["React","Component","createElement","App","RollResultsSection","SingleRollResult","Button","io","jsxDEV","_jsxDEV","DiceRollButton","constructor","props","callCheckAPI","bind","state","checkResponse","rolls","rollstring","rolltotal","basestring","name","rolltype","rollDice","fetch","die","num","mod","then","res","json","setState","render","console","log","variant","size","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/cosmi/.projects/questweaver_testing/react_test/src/DiceRollButton.js"],"sourcesContent":["import React, { Component, createElement } from \"react\";\r\nimport App from \"./App\";\r\nimport RollResultsSection from \"./RollResultsSection\";\r\nimport SingleRollResult from \"./SingleRollResult\";\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport io from 'socket.io-client';\r\n\r\n\r\nclass DiceRollButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.callCheckAPI = this.callCheckAPI.bind(this);\r\n    this.state = {\r\n      checkResponse: {\r\n        rolls: [],\r\n        rollstring: \"\",\r\n        rolltotal: \"\",\r\n        basestring: \"\",\r\n        name: \"\",\r\n        rolltype: \"\",\r\n      }\r\n    }\r\n  }\r\n\r\n  rollDice () {\r\n\r\n  }\r\n\r\n  callCheckAPI() {\r\n    fetch(`http://localhost:9000/rollcheck?name=${this.props.name}&rolltype=${this.props.rolltype}&die=${this.props.die}&num=${this.props.num}&mod=${this.props.mod}`)\r\n        .then(res => res.json())\r\n        .then(res => this.setState({ checkResponse: res }));\r\n/*\r\n    let rollcontainer = document.getElementById('rollContainer')\r\n    let rollcontainerlist = rollcontainer.querySelectorAll('.SingleRollResult');\r\n    if (rollcontainerlist.length < 4) {\r\n      let newrollresult = createElement(SingleRollResult, {rollstring={this.state.checkResponse.rollstring} rolltotal={this.state.checkResponse.rolltotal} name={this.state.checkResponse.name}})\r\n      rollcontainer.appendChild(newrollresult);\r\n      }\r\n  */\r\n    \r\n    //RollResultsSection.displayRollResults(this.state.checkResponse.name, this.state.checkResponse.rolltype, this.state.checkResponse.rollstring, this.state.checkResponse.rolltotal, this.state.checkResponse.basestring);\r\n  }\r\n  \r\n  render (){\r\n    console.log(`rollstring = ${this.state.checkResponse.rollstring}`)\r\n    return (\r\n    <Button variant='secondary' size='xl' onClick={this.callCheckAPI}>{this.props.mod}</Button>\r\n    );\r\n  }\r\n};\r\n\r\nexport default DiceRollButton;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,aAAa,QAAQ,OAAO;AACvD,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,MAAM,MAAM,wBAAwB;AAE3C,OAAOC,EAAE,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlC,MAAMC,cAAc,SAAST,SAAS,CAAC;EACrCU,WAAWA,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,KAAK,GAAG;MACXC,aAAa,EAAE;QACbC,KAAK,EAAE,EAAE;QACTC,UAAU,EAAE,EAAE;QACdC,SAAS,EAAE,EAAE;QACbC,UAAU,EAAE,EAAE;QACdC,IAAI,EAAE,EAAE;QACRC,QAAQ,EAAE;MACZ;IACF,CAAC;EACH;EAEAC,QAAQA,CAAA,EAAI,CAEZ;EAEAV,YAAYA,CAAA,EAAG;IACbW,KAAK,CAAE,wCAAuC,IAAI,CAACZ,KAAK,CAACS,IAAK,aAAY,IAAI,CAACT,KAAK,CAACU,QAAS,QAAO,IAAI,CAACV,KAAK,CAACa,GAAI,QAAO,IAAI,CAACb,KAAK,CAACc,GAAI,QAAO,IAAI,CAACd,KAAK,CAACe,GAAI,EAAC,CAAC,CAC7JC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACC,GAAG,IAAI,IAAI,CAACE,QAAQ,CAAC;MAAEf,aAAa,EAAEa;IAAI,CAAC,CAAC,CAAC;IAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAEI;EACF;;EAEAG,MAAMA,CAAA,EAAG;IACPC,OAAO,CAACC,GAAG,CAAE,gBAAe,IAAI,CAACnB,KAAK,CAACC,aAAa,CAACE,UAAW,EAAC,CAAC;IAClE,oBACAT,OAAA,CAACH,MAAM;MAAC6B,OAAO,EAAC,WAAW;MAACC,IAAI,EAAC,IAAI;MAACC,OAAO,EAAE,IAAI,CAACxB,YAAa;MAAAyB,QAAA,EAAE,IAAI,CAAC1B,KAAK,CAACe;IAAG;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS,CAAC;EAE7F;AACF;AAAC;AAED,eAAehC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}